/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PRINCIPAL.java
 *
 * Created on 09/08/2011, 06:59:05 PM
 */
package PRINCIPAL;

import Multi_bd.Principal;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jonathan palomino <jhonelfenix@gmail.com>
 */
public class PRINCIPAL extends javax.swing.JFrame {

    Principal objeto;
    Connection enlace;
    Statement st = null;
    ResultSet resp = null;
    String url_consulta = "";
    private static DefaultTableModel miModelo;
    private static DefaultTableModel miModelo1;
    public String[][] data = {};
    String DNI;
int Contador_de_celda;
    /** Creates new form PRINCIPAL */
    public PRINCIPAL() {
        //llama a la capa de coneccion
        objeto = new Principal();
        objeto.getCONECTOR_Mysql().SetGestorMYSQL("localhost", "tramit", "root", "123456");
        //SE ESPECIFICA LA DIRECCION DEL SERVIDOR,EL NOMBRE DE LA BASE DE DATOS,EL USUARIO Y LA CONTRASEÑA
        enlace = objeto.getEnlace();
        try {
            st = enlace.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(PRINCIPAL.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Fin de la capa de coneccion
        initComponents();

        miModelo = new DefaultTableModel(data, new String[]{"DNI", "Apellido Paterno", "Apellido Materno", "Nombre"}) {

            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        miModelo1 = new DefaultTableModel(data, new String[]{"Años", "Deuda"}) {

            boolean[] canEdit = new boolean[]{
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        Tabla.setModel(miModelo);
        Tabla2.setModel(miModelo1);
        Panel3.setViewportView(Tabla);
    }

    JTable getMiTabla() {
        return Tabla;
    }

    public static DefaultTableModel getMiModelo() {
        return miModelo;
    }

    public static DefaultTableModel getMiModelo1() {
        return miModelo1;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtBarrio = new javax.swing.JTextField();
        CmbCalles = new javax.swing.JComboBox();
        CmbCuadras = new javax.swing.JComboBox();
        btnBuscar = new javax.swing.JButton();
        labelIcono = new javax.swing.JLabel();
        Panel3 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla2 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de datos");

        jLabel1.setText("Tipee Barrio");

        txtBarrio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBarrioKeyReleased(evt);
            }
        });

        CmbCalles.setEnabled(false);
        CmbCalles.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CmbCallesItemStateChanged(evt);
            }
        });

        CmbCuadras.setEnabled(false);
        CmbCuadras.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CmbCuadrasItemStateChanged(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"2005", null, null, null},
                {"2006", null, null, null},
                {"2007", null, null, null},
                {"2008", null, null, null},
                {"2009", null, null, null},
                {"2010", null, null, null},
                {"2011", null, null, null},
                {"2012", null, null, null},
                {"2013", null, null, null},
                {"2014", null, null, null}
            },
            new String [] {
                "DNI", "Apellido Paterno", "Apellido Materno", "Nombres"
            }
        ));
        Tabla.setEnabled(false);
        Tabla.getTableHeader().setReorderingAllowed(false);
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaMousePressed(evt);
            }
        });
        Panel3.setViewportView(Tabla);
        Tabla.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        Tabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Tabla2MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla2);

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Confirmar Cambios");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(31, 31, 31)
                        .addComponent(txtBarrio, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(183, 183, 183)
                        .addComponent(labelIcono, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btnBuscar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CmbCalles, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(CmbCuadras, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Panel3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(txtBarrio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelIcono, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(btnBuscar)))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CmbCalles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CmbCuadras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Panel3, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBarrioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBarrioKeyReleased
        Busqueda_Aprox(txtBarrio.getText());
    }//GEN-LAST:event_txtBarrioKeyReleased

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        CmbCalles.removeAllItems();
        Llamar_Calles(txtBarrio.getText());
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void CmbCallesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CmbCallesItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) //Solo evento de seleccion
        {
            CmbCuadras.removeAllItems();
            inicializaTabla();
            System.out.println(CmbCalles.getSelectedItem());
            Retornar_Cuadras(CmbCalles.getSelectedItem().toString());
        }

    }//GEN-LAST:event_CmbCallesItemStateChanged

    private void CmbCuadrasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CmbCuadrasItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) //Solo evento de seleccion
        {
            inicializaTabla();
            System.out.println(CmbCuadras.getSelectedItem());
            //buscar personas con cuadra y calle seleccionadas
            Retornar_Personas(CmbCuadras.getSelectedItem().toString(), CmbCalles.getSelectedItem().toString());
        }
    }//GEN-LAST:event_CmbCuadrasItemStateChanged

    private void TablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMousePressed
        int Contador_de_celda1 = getMiTabla().getSelectedRow();
        if (evt.getClickCount() == 2) {
            DNI = (String) getMiTabla().getValueAt(Contador_de_celda1, 0);
            BuscarDeuda(DNI);
        }
    }//GEN-LAST:event_TablaMousePressed

    private void Tabla2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tabla2MousePressed
        Contador_de_celda = Tabla2.getSelectedRow();
        if (evt.getClickCount() == 2) {
            System.out.println("Desea editar???");
            //Barrio1
            System.out.println((String) Tabla2.getValueAt(Contador_de_celda, 1));
            System.out.println((String) Tabla2.getValueAt(Contador_de_celda, 0));
        }
    }//GEN-LAST:event_Tabla2MousePressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        UpdatearDatos();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new PRINCIPAL().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CmbCalles;
    private javax.swing.JComboBox CmbCuadras;
    private javax.swing.JScrollPane Panel3;
    private javax.swing.JTable Tabla;
    private javax.swing.JTable Tabla2;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel labelIcono;
    private javax.swing.JTextField txtBarrio;
    // End of variables declaration//GEN-END:variables

    private void Busqueda_Aprox(String texto) {
        if (Buscar_BD(texto) == true) {
            labelIcono.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/img/valido.png")).getImage().getScaledInstance(50, -1, Image.SCALE_DEFAULT)));
            ESTADO_BOTONES_H_NH(true);
        } else {
            labelIcono.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/img/invalido.png")).getImage().getScaledInstance(50, -1, Image.SCALE_DEFAULT)));
            ESTADO_BOTONES_H_NH(false);
        }
    }

    private boolean Buscar_BD(String txtbarrio) {
        boolean estado = false;
        if (enlace != null) {
            try {
                url_consulta = "select Nomb_barrio from barrios where Nomb_barrio= '" + txtbarrio + "'";
                resp = st.executeQuery(url_consulta);
                while (resp.next()) {
                    String origen = resp.getObject(1).toString();
                    if (origen.equals(txtbarrio)) {
                        estado = true;
                    }
                }
            } catch (SQLException ex) {
                //System.out.println("No se encunetra registrado");
            }
        }
        return estado;
    }

    private void ESTADO_BOTONES_H_NH(boolean b) {
        CmbCalles.setEnabled(b);
        CmbCuadras.setEnabled(b);
        Tabla.setEnabled(b);
    }

    private void Llamar_Calles(String text) {
        if (enlace != null) {
            try {
                url_consulta = "select Nomb_calle from calle where barrios_codi_barrio "
                        + "in (select codi_barrio from barrios where Nomb_barrio ='" + text + "')";
                resp = st.executeQuery(url_consulta);
                while (resp.next()) {
                    String origen = resp.getObject(1).toString();
                    CmbCalles.addItem(origen);
                }
            } catch (SQLException ex) {
                //System.out.println("No se encunetra registrado");
            }
        }
    }

    private void Retornar_Cuadras(String seleccionado) {
        if (enlace != null) {
            try {
                url_consulta = "select comb_cuadra from cuadras where codi_cuadra "
                        + "in(select cuadras_codi_cuadra from `calle-cuadra` "
                        + "where calle_codi_calle in(select codi_calle from calle "
                        + "where nomb_calle='" + seleccionado + "'))";
                resp = st.executeQuery(url_consulta);
                while (resp.next()) {
                    String origen = resp.getObject(1).toString();
                    CmbCuadras.addItem(origen);
                }
            } catch (SQLException ex) {
                //System.out.println("No se encunetra registrado");
            }
        }

    }

    public void inicializaTabla() {
        // obtiene numero de filas de la tabla
        int filas = getMiTabla().getRowCount();
        // remueve todas las filas de la tabla
        for (int fila = 0; fila < filas; fila++) {
            getMiModelo().removeRow(0);
        }
        int filas1 = Tabla2.getRowCount();
        // remueve todas las filas de la tabla
        for (int fila = 0; fila < filas1; fila++) {
            getMiModelo1().removeRow(0);
        }

    }

    private void Retornar_Personas(String cuadras, String calles) {
        if (enlace != null) {
            try {
                url_consulta = "SELECT DNI_persona,nomb_persona,pate_persona,mate_persona "
                        + "FROM personas where `CALLE-CUADRA_CALLE_CODI_CALLE` "
                        + "in(select codi_Calle from calle where nomb_calle ='" + calles + "') "
                        + "AND `CALLE-CUADRA_CUADRAS_CODI_CUADRA` in(select codi_cuadra "
                        + "from cuadras where comb_cuadra='" + cuadras + "')";
                resp = st.executeQuery(url_consulta);
                while (resp.next()) {
                    Object[] datos = {resp.getObject(1).toString(), resp.getObject(2).toString(), resp.getObject(3).toString(), resp.getObject(4).toString()};
                    getMiModelo().addRow(datos);
                }
            } catch (SQLException ex) {
                //System.out.println("No se encunetra registrado");
            }
        }
    }

    private void BuscarDeuda(String DNI) {
        if (enlace != null) {
            try {
                url_consulta = "select anios_nume_anio,monto_deuda from deudas "
                        + "where Personas_dni_persona='" + DNI + "'";
                resp = st.executeQuery(url_consulta);
                while (resp.next()) {
                    Object[] datos = {resp.getObject(1).toString(), resp.getObject(2).toString()};
                    getMiModelo1().addRow(datos);
                }
            } catch (SQLException ex) {
                //System.out.println("No se encunetra registrado");
            }
        }
    }

    private void UpdatearDatos() {
        if (enlace != null) {
            try {
                url_consulta = "UPDATE tramit.deudas SET `MONTO_DEUDA` = '"+Tabla2.getValueAt(Contador_de_celda, 1).toString()+"' "
                        + "WHERE `ANIOS_NUME_ANIO` = '"+Tabla2.getValueAt(Contador_de_celda, 0).toString()+"' AND `PERSONAS_DNI_PERSONA` = '"+DNI+"'";
                st.execute(url_consulta);

            } catch (SQLException ex) {
                //System.out.println("No se encunetra registrado");
            }
        }
    }
}
