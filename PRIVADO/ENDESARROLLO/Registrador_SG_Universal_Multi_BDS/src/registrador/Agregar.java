/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Agregar.java
 *
 * Created on 15/01/2011, 10:16:18 PM
 */
package registrador;

import java.awt.Component;
import java.awt.Container;
import java.awt.event.ItemEvent;
import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import Nodos.*;
import java.awt.Image;
import javax.swing.ImageIcon;

/**
 *
 * @author jonathan
 */
public class Agregar extends javax.swing.JFrame{

    Connection enlace;
    Statement st = null;
    ResultSet resp = null;
    String url_consulta = "";
    DefaultListModel modelo = new DefaultListModel();
    String txtcodi_raza = "R_001";
    public JLabel[] etiketa;
    JTextField[] objetos_texto;
    int numero_planetas = 0;
    public ArrayList contenido_planeta = new ArrayList();
    public static ListaDobleConOrden lst = new ListaDobleConOrden();
    static Direcciones Direccion;
    int nume_defensas = 0, nume_naves = 0, nume_tropas = 0;
    private ArrayList tropas = new ArrayList();
    private ArrayList naves = new ArrayList();
    private ArrayList defensas = new ArrayList();

    /** Creates new form Agregar */
    Agregar(Libreria obje) {
        enlace = obje.getEnlace();
        initComponents();
        CargarRazas();
        listDirecciones.setModel(modelo);
        listDirecciones.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public void ESTADO_BOTONES_H_NH(boolean estado_final) {
        btnRegistrar.setEnabled(estado_final);
        btnAgregar.setEnabled(estado_final);
        btnEliminar.setEnabled(estado_final);
        btnGuardarDatos.setEnabled(estado_final);
        listDirecciones.setEnabled(estado_final);
        ComboRaza.setEnabled(estado_final);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtuser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listDirecciones = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        ComboRaza = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panel_tropas = new javax.swing.JPanel();
        Panel_naves = new javax.swing.JPanel();
        panel_defensas = new javax.swing.JPanel();
        btnGuardarDatos = new javax.swing.JButton();
        labelIcono = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agregar Usuarios");
        setResizable(false);

        jLabel1.setText("Usuario");

        txtuser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtuserKeyReleased(evt);
            }
        });

        jLabel2.setText("Raza");

        listDirecciones.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listDireccionesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listDirecciones);

        jLabel3.setText("Direcciones");

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        ComboRaza.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboRazaItemStateChanged(evt);
            }
        });

        panel_tropas.setPreferredSize(new java.awt.Dimension(445, 378));

        javax.swing.GroupLayout panel_tropasLayout = new javax.swing.GroupLayout(panel_tropas);
        panel_tropas.setLayout(panel_tropasLayout);
        panel_tropasLayout.setHorizontalGroup(
            panel_tropasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 445, Short.MAX_VALUE)
        );
        panel_tropasLayout.setVerticalGroup(
            panel_tropasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Tropas", panel_tropas);

        javax.swing.GroupLayout Panel_navesLayout = new javax.swing.GroupLayout(Panel_naves);
        Panel_naves.setLayout(Panel_navesLayout);
        Panel_navesLayout.setHorizontalGroup(
            Panel_navesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 445, Short.MAX_VALUE)
        );
        Panel_navesLayout.setVerticalGroup(
            Panel_navesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Naves", Panel_naves);

        javax.swing.GroupLayout panel_defensasLayout = new javax.swing.GroupLayout(panel_defensas);
        panel_defensas.setLayout(panel_defensasLayout);
        panel_defensasLayout.setHorizontalGroup(
            panel_defensasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 445, Short.MAX_VALUE)
        );
        panel_defensasLayout.setVerticalGroup(
            panel_defensasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Defensas", panel_defensas);

        btnGuardarDatos.setText("GUARDAR DATOS  DE ESTA DIRECCION");
        btnGuardarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarDatosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRegistrar)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnGuardarDatos)
                                    .addComponent(btnEliminar)
                                    .addComponent(btnAgregar)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtuser, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(jLabel2)
                                .addGap(39, 39, 39)
                                .addComponent(ComboRaza, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelIcono, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtuser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(ComboRaza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelIcono, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addGap(18, 18, 18)
                        .addComponent(btnGuardarDatos, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)))
                .addGap(23, 23, 23)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnRegistrar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try {
            if (modelo.getSize() < 5) {
                String direccion = JOptionPane.showInputDialog("Ingrese direccion");
                if (!direccion.isEmpty() && DIRE_LIBRE(direccion)) {
                    modelo.addElement(direccion);

                    if (modelo.getSize() == 1) {
                        Activar_Contenedor(panel_tropas);
                        Activar_Contenedor(Panel_naves);
                        Activar_Contenedor(panel_defensas);
                        //Seleccionar primer elemento
                    }
                    //Agregar estructura dinamica
                    contenido_planeta.add(direccion);//el planeta sera la cabecera
                    for (int i = 1; i < (nume_defensas + nume_naves + nume_tropas + 1); i++) {
                        contenido_planeta.add(0);//valor inicial de las unidades es 0
                    }
                    IngresaDatos(direccion, contenido_planeta);
                    lst.agrega(Direccion);
                }
                else {
                    JOptionPane.showMessageDialog(null, "Direccion vacia o ya usada", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return; //Regresa a la instruccion inicial

                }
            }
            else {
                //System.out.println("acabo");
            }
            listDirecciones.setModel(modelo); //asignar el modelo
        }
        catch (NullPointerException nullPointerException) {
            JOptionPane.showMessageDialog(null, "Agrege algo a la direccion");
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        //System.out.println(modelo.getSize());

        try {
            NodoDoble auxiliar = lst.busca(listDirecciones.getSelectedValue().toString());
            if (auxiliar != null) {
                lst.elimina(auxiliar);
            }
            modelo.remove(listDirecciones.getSelectedIndex());

        }
        catch (Exception e) {
            //System.out.println("vacio o sin seleccionar");
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // ejecutar consulta
        //Registrar usuario y raza
        Registraruser_raza(txtuser.getText().trim(), ComboRaza.getSelectedItem().toString());
        //Registrar planetas
        Registrar_user_planetas(txtuser.getText().trim());
        Registrar_unidades_planetas();
        ESTADO_BOTONES_H_NH(false);
        btnCancelar.setText("Salir");
        lst.setInicio(null);
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
        lst.setInicio(null);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void ComboRazaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboRazaItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) //Solo evento de seleccion
        {
            modelo.clear(); //Limpia la lista de planetas x el hecho de cambiar de raza
            lst.setInicio(null);
            LIMPIAR_PANELES();
            try {
                Asignar_codi_raza(ComboRaza.getSelectedItem().toString());
            }
            catch (Exception e) {
            }
            RECARGAR_TROPAS();
            RECARGAR_NAVES();
            RECARGAR_DEFENSAS();
            Desactivar_Contenedor(panel_tropas);
            Desactivar_Contenedor(Panel_naves);
            Desactivar_Contenedor(panel_defensas);
        }

    }//GEN-LAST:event_ComboRazaItemStateChanged

    private void btnGuardarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarDatosActionPerformed
        //modificar lista dinamica
        ACTUALIZA_VALORES_ED(listDirecciones.getSelectedValue().toString());
    }//GEN-LAST:event_btnGuardarDatosActionPerformed

    private void listDireccionesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listDireccionesValueChanged
//System.out.println(evt);
        if (evt.getValueIsAdjusting())//Para que solo imprima una sola vez
        {
            //System.out.println("cambio de elemento");
            //System.out.println(listDirecciones.getSelectedValue());

            //Llamar Ed
            LLAMAR_VALORES_ED(listDirecciones.getSelectedValue().toString());
            //guardar datos de los paneles si estan con datos dependiendo de el item
            //cargar datos de los paneles con datos
        }
    }//GEN-LAST:event_listDireccionesValueChanged

    private void txtuserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtuserKeyReleased
        BusquedaAproximada(txtuser.getText());
        //System.out.println("Tecla");
    }//GEN-LAST:event_txtuserKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboRaza;
    private javax.swing.JPanel Panel_naves;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardarDatos;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JLabel labelIcono;
    private javax.swing.JList listDirecciones;
    private javax.swing.JPanel panel_defensas;
    private javax.swing.JPanel panel_tropas;
    private javax.swing.JTextField txtuser;
    // End of variables declaration//GEN-END:variables

    private void CargarRazas() {
        if (enlace != null) {
            try {
                url_consulta = "SELECT nomb_raza FROM Razas";
                st = enlace.createStatement();
                resp = st.executeQuery(url_consulta);
                while (resp.next()) {
                    ComboRaza.addItem(resp.getObject(1));
                }
            }
            catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void Registraruser_raza(String txtuser, String txtraza) {
        //consultar usuario si esuq esta registrado
        Asignar_codi_raza(ComboRaza.getSelectedItem().toString());

        if (Buscar_BD(txtuser) != true) {
            if (enlace != null) {
                try {
                    url_consulta = "INSERT INTO usuarios (nomb_usuarios, codi_raza) VALUES ('" + txtuser + "', '" + txtcodi_raza + "')";
                    st = enlace.createStatement();
                    st.execute(url_consulta);

                }
                catch (SQLException ex) {
                    Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            //registrar usuario
            System.out.println("registrar " + txtuser + " " + txtraza);

        }
        else {
            JOptionPane.showMessageDialog(null, "Usuario ya registrado");
            System.out.println("error");
            //mensaje de error
        }

    }

    private boolean Buscar_BD(String txtuser) {
        //System.out.println("Buscando " + txtuser);
        boolean estado = false;
        if (enlace != null) {
            try {
                url_consulta = "Select nomb_usuarios from usuarios where nomb_usuarios = '" + txtuser + "'";
                //Statement st1 = enlace.createStatement();
                resp = st.executeQuery(url_consulta);
                while (resp.next()) {
                    String origen = resp.getObject(1).toString();
                    //System.out.println(" origen " + origen);
                    if (origen.equals(txtuser)) {
                        estado = true;
                    }
                }
            }
            catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
                //System.out.println("No se encunetra registrado");
            }
        }
        return estado;
    }

    private void Asignar_codi_raza(String raza) {
        if (enlace != null) {
            try {
                url_consulta = "select * from Razas where Razas.nomb_raza ='" + raza + "'";
                st = enlace.createStatement();
                ResultSet resp1 = st.executeQuery(url_consulta);
                while (resp1.next()) {
                    txtcodi_raza = resp1.getObject(1).toString();
                    numero_planetas = Integer.parseInt(resp1.getObject(4).toString());
                }
            }
            catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //System.out.println(txtcodi_raza + " " + numero_planetas);
    }

    private void Registrar_user_planetas(String usuario) {
        if (enlace != null) {
            for (int i = 0; i < modelo.getSize(); i++) {
                try {
                    //System.out.println(modelo.getElementAt(i)); //LISTAR PLANETAS
                    url_consulta = "INSERT INTO Direcciones (Numero_direccion, Galaxia, nomb_usuarios) VALUES ('" + modelo.getElementAt(i).toString() + "', '" + Deducir_galaxia(modelo.getElementAt(i).toString()) + "', '" + usuario + "')";
                    st = enlace.createStatement();
                    st.execute(url_consulta);
                }
                catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "La direccion ya esta usada eliminela y elija otra");
                }
            }
        }
    }

    private String Deducir_galaxia(String direccion) {
        String nombre_galaxia = "";
        char primeraletra = direccion.charAt(0);
        if (primeraletra == "P".charAt(0)) {
            nombre_galaxia = "Pegasus";
            //System.out.println("Pegasus");
        }
        else if (primeraletra == "A".charAt(0)) {
            //System.out.println("Andromeda");
            nombre_galaxia = "Andrómeda";
        }
        else if (primeraletra == "M".charAt(0)) {
            //System.out.println("Midguay");
            nombre_galaxia = "Midway";
        }
        else if (primeraletra == "V".charAt(0)) {
            //System.out.println("Via Lactea");
            nombre_galaxia = "Vía Láctea";
        }
        return nombre_galaxia;
    }

    private void RECARGAR_TROPAS() {
        if (enlace != null) {
            try {
                url_consulta = "select * from Tropas where codi_raza = '" + txtcodi_raza + "'";
                st = enlace.createStatement();
                ResultSet resp1 = st.executeQuery(url_consulta);
                int alto_panel = panel_tropas.getHeight(); //obtener alto
                ArrayList lista = new ArrayList();
                while (resp1.next()) {
                    //System.out.println(resp1.getObject(1));
                    lista.add(resp1.getObject(1));
                }
                nume_tropas = lista.size();
                setTropas(lista);
                int espaciado = (int) (alto_panel / lista.size()) + 1;
                Crear_Objetos(espaciado, panel_tropas, lista);
                //Ahora pintar las tropas
            }
            catch (SQLException ex) {
                Logger.getLogger(Agregar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void RECARGAR_NAVES() {
        if (enlace != null) {
            try {
                url_consulta = "select * from Naves where codi_raza = '" + txtcodi_raza + "'";
                st = enlace.createStatement();
                ResultSet resp = st.executeQuery(url_consulta);
                int alto_panel = panel_tropas.getHeight(); //obtener alto
                ArrayList lista = new ArrayList();
                while (resp.next()) {
                    //System.out.println(resp.getObject(1));
                    lista.add(resp.getObject(1));
                }
                nume_naves = lista.size();
                setNaves(lista);
                int espaciado = (int) (alto_panel / lista.size()) + 1;
                Crear_Objetos(espaciado, Panel_naves, lista);
            }
            catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void RECARGAR_DEFENSAS() {
        if (enlace != null) {
            try {
                url_consulta = "select * from Defensas where codi_raza = '" + txtcodi_raza + "'";
                st = enlace.createStatement();
                ResultSet resp = st.executeQuery(url_consulta);
                int alto_panel = panel_tropas.getHeight(); //obtener alto
                ArrayList lista = new ArrayList();
                while (resp.next()) {
                    //System.out.println(resp.getObject(1));
                    lista.add(resp.getObject(1));
                }
                nume_defensas = lista.size();
                setDefensas(lista);
                int espaciado = (int) (alto_panel / lista.size()) + 1;
                Crear_Objetos(espaciado, panel_defensas, lista);
            }
            catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void Crear_Objetos(int espaciado, JPanel panel_padre, ArrayList lista) {
        etiketa = new JLabel[lista.size()];
        objetos_texto = new JTextField[espaciado];
        for (int i = 0; i < lista.size(); i++) {
            etiketa[i] = new JLabel(lista.get(i).toString());
            panel_padre.add(etiketa[i]);
            objetos_texto[i] = new JTextField("");
            panel_padre.add(objetos_texto[i]);
            objetos_texto[i].setText("");
            objetos_texto[i].setBounds(300, 20 + espaciado * i, 50, 20);
            etiketa[i].setBounds(20, 20 + espaciado * i, 150, 20);
        }

    }

    private void LIMPIAR_PANELES() {
        panel_tropas.removeAll();
        panel_tropas.repaint();
        Panel_naves.removeAll();
        Panel_naves.repaint();
        panel_defensas.removeAll();
        panel_defensas.repaint();
    }

    private void Registrar_unidades_planetas() {
        try {
            //String direccion_actual = listDirecciones.getSelectedValue().toString();
            //System.out.println(direccion_actual);
            String usuario = txtuser.getText().trim();
            //hacer consulta
            //llamar nombre de usuario
            //llamar cada direccion en la ED
            NodoDoble auxiliar = lst.getInicio();
            while (auxiliar != null) {
                ArrayList temp = auxiliar.getNodo().getContenido();
                for (int i = 1; i < temp.size(); i++) {
                    if (i <= getTropas().size()) {
                        try {
                            url_consulta = "INSERT INTO usuario_numero_tropas " + "(nomb_usuarios, nomb_tropas, cantidad_trop, numero_Direccion) " + "VALUES ('" + usuario + "', '" + ((JLabel) panel_tropas.getComponent((i - 1) * 2)).getText().trim() + "', '" + temp.get(i) + "', '" + temp.get(0) + "')";
                            //System.out.println(url_consulta);
                            st = enlace.createStatement();
                            st.execute(url_consulta);
                        }
                        catch (SQLException ex) {
                            //
                        }
                    }
                    else if (i > getTropas().size() && i <= (getNaves().size() + getTropas().size())) {
                        try {
                            url_consulta = "INSERT INTO usuario_numero_naves " + "(nomb_usuarios, Nomb_Naves, cantidad_nav, numero_Direccion) " + "VALUES ('" + usuario + "', '" + ((JLabel) Panel_naves.getComponent((i - 1 - getTropas().size()) * 2)).getText().trim() + "', '" + temp.get(i) + "', '" + temp.get(0) + "')";
                            //System.out.println(url_consulta);
                            st = enlace.createStatement();
                            st.execute(url_consulta);
                        }
                        catch (SQLException ex) {
                            //
                        }
                    }
                    else if (i > (getNaves().size() + getTropas().size())) {
                        try {
                            url_consulta = "INSERT INTO usuario_numero_Defensas " + "(nomb_usuarios, nomb_Defensas, cantidad_def, numero_Direccion) " + "VALUES ('" + usuario + "', '" + ((JLabel) panel_defensas.getComponent((i - 1 - getTropas().size() - getNaves().size()) * 2)).getText().trim() + "', '" + temp.get(i) + "', '" + temp.get(0) + "')";
                            //System.out.println(url_consulta);
                            st = enlace.createStatement();
                            st.execute(url_consulta);
                        }
                        catch (SQLException ex) {
                            //
                        }
                    }
                }
                auxiliar = auxiliar.getApuntSgte();
            }
            //por cada direccion hacer una consulta de insert
        }
        catch (Exception e) {
            //error
        }
    }

    private void Desactivar_Contenedor(Container c) {
        Component[] components = c.getComponents();
        for (int i = 0; i < components.length; i++) {
            components[i].setEnabled(false);
            if (components[i] instanceof Container) {
                Desactivar_Contenedor((Container) components[i]);
            }
        }
    }

    private void Activar_Contenedor(Container c) {
        Component[] components = c.getComponents();
        for (int i = 0; i < components.length; i++) {
            components[i].setEnabled(true);
            if (components[i] instanceof Container) {
                Desactivar_Contenedor((Container) components[i]);
            }
        }
    }

    private void IngresaDatos(String direccion, ArrayList contenido_planeta) {
        Direccion = new Direcciones();
        Direccion.setContenido(contenido_planeta);
        Direccion.setNombre(direccion);
    }

    private void ACTUALIZA_VALORES_ED(String toString) {
        ArrayList temporal = new ArrayList();
        //System.out.println("Direccion actual " + toString);
        temporal.add(toString);
        //LLAMAR ED
        for (int i = 0; i < nume_tropas; i++) {
            String valor_caja_texto = ((JTextField) panel_tropas.getComponent(i * 2 + 1)).getText().trim();//txt del panel tropas
            //System.out.println("tropas " + valor_caja_texto);
            temporal.add(valor_caja_texto);
        }
        for (int i = 0; i < nume_naves; i++) {
            String valor_caja_texto = ((JTextField) Panel_naves.getComponent(i * 2 + 1)).getText().trim();//txt del panel tropas
            //System.out.println("naves " + valor_caja_texto);
            temporal.add(valor_caja_texto);
        }
        for (int i = 0; i < (nume_defensas); i++) {
            String valor_caja_texto = ((JTextField) panel_defensas.getComponent(i * 2 + 1)).getText().trim();//txt del panel tropas
            //System.out.println("defensas " + valor_caja_texto);
            temporal.add(valor_caja_texto);
        }
        //busca el dato para actualizar valores
        NodoDoble auxiliar = lst.busca(toString);
        if (auxiliar != null) { // no lo encontró
            Direccion = auxiliar.getNodo();
            Direccion.setContenido(temporal);
            for (int i = 1; i < temporal.size(); i++) {
                System.out.println("valores cargados " + temporal.get(i));
            }
        }
        //Guarda informacion de paneles
    }

    private void LLAMAR_VALORES_ED(String toString) {
        NodoDoble auxiliar = lst.busca(toString);
        ArrayList temporal = new ArrayList();
        if (auxiliar != null) {
            Direccion = auxiliar.getNodo();
            temporal = Direccion.getContenido();

            for (int i = 0; i < nume_tropas; i++) {
                String valor_caja_texto = temporal.get(i + 1).toString();
                ((JTextField) panel_tropas.getComponent(i * 2 + 1)).setText(valor_caja_texto);
            }
            for (int i = 0; i < nume_naves; i++) {
                String valor_caja_texto = temporal.get(i + nume_tropas + 1).toString();//txt del panel tropas
                ((JTextField) Panel_naves.getComponent(i * 2 + 1)).setText(valor_caja_texto);
            }
            for (int i = 0; i < nume_defensas; i++) {
                String valor_caja_texto = temporal.get(i + nume_tropas + nume_naves + 1).toString();//txt del panel tropas
                ((JTextField) panel_defensas.getComponent(i * 2 + 1)).setText(valor_caja_texto);
            }
        }

    }

    /**
     * @return the tropas
     */
    public ArrayList getTropas() {
        return tropas;
    }

    /**
     * @param tropas the tropas to set
     */
    public void setTropas(ArrayList tropas) {
        this.tropas = tropas;
    }

    /**
     * @return the naves
     */
    public ArrayList getNaves() {
        return naves;
    }

    /**
     * @param naves the naves to set
     */
    public void setNaves(ArrayList naves) {
        this.naves = naves;
    }

    /**
     * @return the defensas
     */
    public ArrayList getDefensas() {
        return defensas;
    }

    /**
     * @param defensas the defensas to set
     */
    public void setDefensas(ArrayList defensas) {
        this.defensas = defensas;
    }

    private boolean DIRE_LIBRE(String direccion) {
        boolean retorno = true;
        try {
            url_consulta = "select Numero_direccion from `Direcciones` where Numero_direccion='" + direccion + "'";
            st = enlace.createStatement();
            resp = st.executeQuery(url_consulta);
            while (resp.next()) {
                retorno = false;
            }

        }
        catch (SQLException ex) {
            Logger.getLogger(Agregar.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retorno;
    }

    private void BusquedaAproximada(String texto) {
        //System.out.println("testeando " + texto);
        if (Buscar_BD(texto) == true) {
            //System.out.println("encontrado");
            labelIcono.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/img/invalido.png")).getImage().getScaledInstance(50, -1, Image.SCALE_DEFAULT)));
            ESTADO_BOTONES_H_NH(false);
        }
        else {
            //System.out.println("no encontrado");
            labelIcono.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/img/valido.png")).getImage().getScaledInstance(50, -1, Image.SCALE_DEFAULT)));
            ESTADO_BOTONES_H_NH(true);
        }
    }
}
