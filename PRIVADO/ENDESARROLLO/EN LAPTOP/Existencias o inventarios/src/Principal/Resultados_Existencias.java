/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Resultados.java
 *
 * Created on 08-oct-2011, 22:36:07
 */
package Principal;

import java.awt.FlowLayout;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import librerias.ListaDobleConOrden_Existencia;
import librerias.NodoDoble_Existencias;
import librerias.Productos;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.util.TableOrder;

/**
 *
 * @author JONATHAN
 */
public class Resultados_Existencias extends javax.swing.JFrame {

    public DefaultTableModel miModelo;
    public String[][] data = {};
    String tipo_cuadro = "", periodo = "", valorY = "", nombre_linea = "Grafico de puntos ingresados";
// Creamos y rellenamos el modelo de datos
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    JTable getMiTabla() {
        return Tabla_1;
    }

    public DefaultTableModel getMiModelo() {
        return miModelo;
    }

    /** Creates new form Resultados */
    Resultados_Existencias(ListaDobleConOrden_Existencia ldco, double promedio) {
        initComponents();
        JFreeChart chart = null;
        chart = createChart(dataset, TiposDeGrafico.LineChart3D);
        // Hacemos y mostramos una ventana con el último de ellos
        ChartPanel grafico = new ChartPanel(chart);
        jPanel1.setLayout(new FlowLayout());
        jPanel1.add(grafico);
        jPanel1.updateUI();

        miModelo = new DefaultTableModel(data, new String[]{"Producto", "DxP", "%Individual", "%Acumulado"}) {
        };
        Tabla_1.setModel(miModelo);
        jScrollPane1.setViewportView(Tabla_1);

        Llenar_Tabla(ldco, promedio);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla_1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Resultados");

        Tabla_1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Producto", "DxP", "%Individual", "%Acumulado"
            }
        ));
        jScrollPane1.setViewportView(Tabla_1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 461, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 373, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla_1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void Llenar_Tabla(ListaDobleConOrden_Existencia ldco, double promedio) {
        inicializaTabla();
        NodoDoble_Existencias auxiliar;
        auxiliar = ldco.getFin();
        double acumulador = 0;

        while (auxiliar != null) {
            acumulador += auxiliar.getNodo().getmultiplo();
            Productos dir = auxiliar.getNodo();
            Object[] datos = {dir.getProducto(), dir.getmultiplo(), auxiliar.getNodo().getmultiplo() / promedio*100+ "%", acumulador / promedio * 100 + "%"};
            getMiModelo().addRow(datos);
            System.out.println(auxiliar.getNodo().getProducto() + "  " + auxiliar.getNodo().getmultiplo() 
                    + "   " + auxiliar.getNodo().getmultiplo() / promedio+ "%" + "   " + acumulador / promedio * 100 + "%"+SETEARZONA(acumulador / promedio * 100));
            dataset.setValue(acumulador / promedio * 100, "", auxiliar.getNodo().getProducto());
            
            if (auxiliar != auxiliar.getApuntAnt()) {
                auxiliar = auxiliar.getApuntAnt();
            } else {
                auxiliar = null;
            }
        }

    }

    private void inicializaTabla() {
        // obtiene numero de filas de la tabla
        int filas = getMiTabla().getRowCount();
        // remueve todas las filas de la tabla
        for (int fila = 0; fila < filas; fila++) {
            getMiModelo().removeRow(0);
        }
    }

    private JFreeChart createChart(CategoryDataset dataset, TiposDeGrafico tipo) {
        // Hacemos la ventana con el gráfico
        // Los tres booleans del final:
        // - Si se deben mostrar las leyendas con el nombre
        // - Si se deben mostrar tooltip al poner el ratón sobre las barras
        // - Si se muestran las url
        JFreeChart chart;
        switch (tipo) {
            case AreaChart:
                chart = ChartFactory.createAreaChart(tipo_cuadro, periodo,
                        valorY, dataset, PlotOrientation.VERTICAL, true,
                        true, true);
                break;
            case BarChart:
                chart = ChartFactory.createBarChart(tipo_cuadro, periodo,
                        valorY, dataset, PlotOrientation.VERTICAL, true,
                        true, true);
                break;
            case BarChart3D:
                chart = ChartFactory.createBarChart3D(tipo_cuadro, periodo,
                        valorY, dataset, PlotOrientation.VERTICAL, true,
                        true, true);
                break;
            case LineChart:
                chart = ChartFactory.createLineChart(tipo_cuadro, periodo,
                        valorY, dataset, PlotOrientation.VERTICAL, true,
                        true, true);
                break;
            case LineChart3D:
                chart = ChartFactory.createLineChart3D(tipo_cuadro, periodo,
                        valorY, dataset, PlotOrientation.VERTICAL, true,
                        true, true);
                break;
            case MultiplePieChart:
                chart = ChartFactory.createMultiplePieChart(tipo_cuadro, dataset,
                        TableOrder.BY_COLUMN, true, true, true);
                break;
            case MultiplePieChart3D:
                chart = ChartFactory.createMultiplePieChart3D(tipo_cuadro, dataset,
                        TableOrder.BY_COLUMN, true, true, true);
                break;
            default:
                chart = null;
        }
        return chart;
    }

    private String SETEARZONA(double d) {
        String valor="";
        
        if(d>=0 &&d<=75){
            valor=" Zona A";
        }
        else if(d>75 && d<=95){
        valor =" Zona B";
        }
        else{
        valor=" Zona C";
        }
        
        return valor;
    }

    enum TiposDeGrafico {

        AreaChart, BarChart, BarChart3D, LineChart, LineChart3D, MultiplePieChart, MultiplePieChart3D
    }
}
