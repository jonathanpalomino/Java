package mapfre.com.c.GUI;



import java.awt.Component;

import java.awt.FlowLayout;

import java.io.Serializable;

import java.lang.reflect.Field;

import java.lang.reflect.Method;

import java.util.StringTokenizer;

import java.util.Vector;



import javax.swing.JLabel;



import mapfre.trn.ControlTeclas;

import mapfre.trn.Globales;

import mapfre.trn.Herramientas;



  /**

   * CONSTRUCCION:      63

   * ULTIMA ACTUALIZACION: 20-08-2003 10:10 <br>

   * Versión: 1.9		JPGARCI   20-08-2003 10:10   Regenero el jar. 

Juan. <br>

   * Versión: 1.8		JGARCI7   19-08-2003 14:02   Modifico la clase BHMantenimiento para que la tecla MODICARRREG sea SELECCIONAR <br>

   * Versión: 1.7		jgarci7   04-07-2002 10:26   Modificacion para que el boton descartar (num 3 en BHGeneral) no se habilite

en TTextField deshabilitados. <br>

   * Versión: 1.6		jgarci7   26-02-2002 16:07   Modifico el procedimiento setActivacionBoton para que contemple

la variable TBarraHerramientas.CONTROL_DEFECTO <br>

   * Versión: 1.5		jgarci7   11-06-2001 16:15   Se modifica el BeanInfo. Estaba mal definida la propiedad

   * de metodos de accion a un boton, esto provocaba una mala 

   * generacion de codigo por parte de VisualCafe

   * Versión: 1.4		gdiez   08-06-2001 14:48   

   * Versión: 1.3		lvalero   20-03-2001 11:34   Botones biestado

   * Versión: 1.2		lvalero   12-02-2001 11:50   Control del menú emergente

   * Versión: 1.1		lvalero   06-11-2000 13:49   Añadido botón EJECUTARQUERY

   * Versión: 1.0		lvalero   10-10-2000 13:03   .

   * <p>Componente barra de herramientas. <P>Este componente consiste en una fila de botones, 

   * donde cada uno de ellos se asocia a la acci&oacute;n de una tecla de funci&oacute;n o 

   * con la ejecución de un método de un objeto o de una clase estática. As&iacute; existen botones de 

   * copiar, pegar, grabar, insertar registro, borrar registro, etc. Estos botones

   * se activan y desactivamente automáticamente dependiendo del contexto</P>

   * 

   * <P>Existen diversos tipos prefabricados de barras de herramientas que se pueden seleccionar mediante 

   * la propiedad <a href="#setBotonesDefecto(java.lang.String)">&quot;2. Botones por 

   * defecto&quot;</a> de la clase TBarraHerramientas. 

   *

   * <P>Una vez asignada una barra prefabricada, se obtiene toda la funcionalidad de los botones por defecto. 

   * Es posible, además, añadir nuevos botones a las barras prefabricadas mediante las siguientes propiedades. 

   * <UL>

   * <LI><a href="#setIconosBotones(java.lang.String[])">3. IconosBotones:</a>

   * Establece las imagenes (iconos) de los distintos botones

   * <LI><a href="#setPropietariosBotones(java.lang.String[])">4. PropietariosBotones</a>   

   * Establece dónde se debe buscar el método que se ejecutará al pulsar el botón. 

   * <LI><a href="#setFlagsBotones(java.lang.String[])">5. FlagsBotones</a>

   * Establece para cada botón cuál es el flag que lo controla. 

   * <LI><a href="#setMetodosBotones(java.lang.String[])">6. MetodosBotones</a>

   * Lista de los nombres de los método que se ejecutarán al pulsar cada botón.

   * <LI><a href="#setToolTipsBotones(java.lang.String[])">7. TooltipsBotones</a>

   * Lista de los nombres de los Tool Tips que se muestran en cada botón en formato "Módulo,Código"

   * <LI><a href="#setPulsadosBotones(java.lang.String[])">8. PulsadosBotones</a>

   * En esta propiedad se define, para cada botón, si es un botón biestado o monoestado. 

   * Y, en el primer caso, cual es su estado de pulsación inicial (pulsado/despulsado).

   * </ul>

   * <P>Todas las propiedades anteriores admiten un array de cadenas. Nótese que cada

   * posición del array hace referecia a cada uno de los botones de la barra de herramientas

   * añadidos por el usuario. La posición de índice 0 se refiere el primer botón

   * añadido y así sucesivamente.</P>

   * <u><B><I><FONT FACE="Arial"><P>Ejemplos de uso de la barra de herramientas</font></i></b></u></P>   

   * Se desea construir una barra de herramientas con la botonera por defecto mas 6 iconos 

   * nuevos propios.<p>

   * Se seleccionará en la propiedad 2 la opcion <i>DatosBHGeneral</i>.<p>

   * Botones definidos por el programador:<p>

   * <b>1º.- Botón que simule la pulsacion de la tecla restaurar (limpiar pantalla)</b><p>

   * 1.- ObjetoPadre: no tiene efecto en este caso.<br>

   * 3.- IconosBotones: <i>restaurar.gif</i> (los iconos se buscan en el directorio de imágenes por defecto de la aplicación)<br>

   * 4.- PropietariosBotones: <i>$tecla</i><br>

   * 5.- FlagsBotones: dejar una linea en blanco pulsando CTRL-ENTER para que el boton este activo en todos los componentes.<br>

   * 6.- MetodosBotones: <i>RESTAURAR</i> (nombre de la tecla limpiar pantalla)<br>

   * 7.- TooltipsBotones: <i>trn,217</i><br>

   * 8.- PulsadoBotones: <i>false</i> (no es un boton especial que puede estar pulsado o liberado como seria un botón de seleccionar negrita)<p>

   * <b>2º.- Botón que ejecute un metodo llamado <i>nuevoMetodo</i> definido en la misma clase (TFrame o TDialog) donde esta la barra de herramientas.</b><p>

   * 1.- ObjetoPadre: <i>(Default)</i> (clase propietaria es la misma ventana donde esta la barra de herramientas) <br>

   * 3.- IconosBotones: <i>nuevoMetodo.gif</i> <br>

   * 4.- PropietariosBotones: <i>$objeto</i> (clase propietaria del metodo se indica en la la propiedad ObjetoPadre, mas arriba)<br> 

   * 5.- FlagsBotones: <i>esTTextField</i> (boton solo esta activo cuando el foco lo tiene un TTextField).<br>

   * 6.- MetodosBotones: <i>miMetodo</i> (nombre del metodo que se ejecutará al pulsar el botón actual)<br>

   * 7.- TooltipsBotones: <i>trn,12345</i> <br>

   * 8.- PulsadoBotones: <i>false</i><p>

   * <b>3º.- Botón que ejecute un metodo de un componente nuevo llamado <i>PnlPanel</i>. El objeto instanciado se llama <i>pnlPanel1</i>.</b><p>

   * 1.- ObjetoPadre: <i>pnlPanel1</i> (clase propietaria es la clase PnlPanel) <br>

   * 3.- IconosBotones: <i>ejecutaPanel.gif</i><br>

   * 4.- PropietariosBotones: <i>$objeto</i> (clase propietaria del metodo se indica en la propiedad ObjetoPadre mas arriba)<br>

   * 5.- FlagsBotones: <i>flagEjecutaMiPanel</i> (boton solo esta activo cuando el foco lo tiene un componente que tiene un método llamado flagEjecutaMiPanel que devuelva true).<br>

   * 6.- MetodosBotones: <i>metodoPanel</i> (nombre del metodo definido en la clase PnlPanel)<br>

   * 7.- TooltipsBotones: <i>trn,666</i> <br>

   * 8.- PulsadoBotones: <i>false</i><p>

   * <b>4º.- Botón que ejecute un metodo estático llamado <i>teclaAyuda</i> de la clase mapfre.trn.ControlTeclas</b><p>

   *    1.- ObjetoPadre: no tiene efecto en este caso<br>

   *    3.- IconosBotones: <i>ayuda.gif</i> <br>

   *    4.- PropietariosBotones: <i>mapfre.trn.ControlTeclas</i><br>

   *    5.- FlagsBotones: dejamos una linea en blanco pulsando CTRL-ENTER<br>

   *    6.- MetodosBotones: <i>teclaAyuda</i><br>

   *    7.- TooltipsBotones: <i>trn,176</i> <br>

   *    8.- PulsadoBotones: <i>false</i><p>

   * <b>5º.- Botón que ejecute un metodo de otro componente creado por nosotros llamado <i>PnlOtroPanel</i>. El objeto instanciado se llama <i>pnlOtroPanel1</i>.</b><p>

   * 1.- ObjetoPadre: <p>solo se puede elegir un padre para todos los botones que tengan el valor $objeto en PropietariosBotones.

   *                     Para elegir un nuevo objeto cuya clase contiene el metodo hay que usar el metodo <i>setObjetoMetodo</i>

   *                     en el metodo de inicio del TFrame o del TDialog. Escribir: <code>setObjetoMetodo(10,pnlOtroPanel1,metodoOtroPanel);</code>

   *                     el nº 10 es el indice del boton empezando a contar por 0 y por los botones por defecto (en este caso son 6 en DatosBHGeneral)</p>

   *    3.- IconosBotones: <i>otroPanel.gif</i><br>

   *    4.- PropietariosBotones: <i>$objeto</i> (clase propietaria del metodo se indica en ObjetoPadre)<br>

   *    5.- FlagsBotones: <i>flagTCheckBox</i> (boton solo esta activo cuando el foco lo tiene un TCheckBox).<br>

   *    6.- MetodosBotones: <i>metodoOtroPanel</i> (nombre del metodo definido en la clase PnlPanel)<br>

   *    7.- TooltipsBotones: <i>trn,1000</i> <br>

   *    8.- PulsadoBotones: <i>false</i><p>   

   * <b>6º.- Botón que pueda estar pulsado o liberado por el usuario.</b><p>

   *      Cuando este pulsado el texto de los TTextField contenidos en un panel llamado <i>pnlPanel</i> aparece en mayúsculas y si esta liberado en minúsculas.</p>

   *    1.- ObjetoPadre: <i>(Default)</i><br>

   *    3.- IconosBotones: <i>mayusculas.gif</i><br>

   *    4.- PropietariosBotones: <i>$objeto</i><br>

   *    5.- FlagsBotones: <i>flagTTextField</i><br>

   *    6.- MetodosBotones: <i>cambiarMayusculas</i><br>

   *    7.- TooltipsBotones: <i>trn,1</i> <br>

   *    8.- PulsadoBotones: <i>true,true</i><br> (al iniciar el programa el boton esta pulsado: elegidas mayusculas)<br>

   *    <pre>

   *        public void cambiarMayusculas()

   *        {

   *            int numeroBoton=11; // elegir el numero del boton que corresponda

   *            // LA SIGUIENTES LINEAS SIEMPRE SON NECESARIAS PARA CAMBIAR EL ESTADO 

   *            // DE PULSACION DEL BOTON

   *

   *            // cambia el estado de pulsacion al valor contrario al que tenia

   *            boolean pulsado=!this.TBarraHerramientas.isPulsadoBoton(numeroBoton);

   *            this.TBarraHerramientas.setPulsadoBoton(numeroBoton,pulsado);

   *

   *            // las siguientes lineas son especificas de la acción a realizar

   *            Component [] comp = pnlPanel.getComponents();

   *            for (int i=0; i < comp.length ;i++)

   *	        {

   *	            if (comp[i] instanceof TTextField)

   *	                ((TTextField)comp[i]).setMayusculas(pulsado);

   *	        }        

   *        }

   *    </pre>

   *        

   * </p>

   * <p>

   * 

   * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">

   * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">

   * <TD COLSPAN=2><FONT SIZE="+2">

   * <B>Property Summary</B></FONT></TD>

   * </TR>

   * 

   * <TR><TD width=33%><B>Objeto Padre</B>

   * <TD>VER <a href="#setObjetoPadre(java.lang.Object)">setObjetoPadre</a>

   * 

   * <TR><TD><B>Botones Defecto</B>

   * <TD>VER <a href="#setBotonesDefecto(java.lang.String)">setBotonesDefecto</a>

   * 

   * <TR><TD><B>Iconos Botones</B>

   * <TD>VER <a href="#setIconosBotones(java.lang.String[])">setIconosBotones</a>

   * 

   * <TR><TD><B>Propietarios Botones</B>

   * <TD>VER <a href="#setPropietariosBotones(java.lang.String[])">setPropietariosBotones</a>

   * 

   * <TR><TD><B>Flags Botones</B>

   * <TD>VER <a href="#setFlagsBotones(java.lang.String[])">setFlagsBotones</a>

   * 

   * <TR><TD><B>Metodos de Accion</B>

   * <TD>VER <a href="#setMetodosAccion(java.lang.String[])">setMetodosAccion</a>

   * 

   * <TR><TD><B>Tooltips Botones</B>

   * <TD>VER <a href="#setTooltipsBotones(java.lang.String[])">setTooltipsBotones</a>

   * 

   * <TR><TD><B>Pulsados Botones</B>

   * <TD>VER <a href="#setPulsadosBotones(java.lang.String[])">setPulsadosBotones</a>   

   * 

   * </table>

   * <p>Nótese que las propiedades anteriores <b>sólo</b> hacen referencia a los

   * botones nuevos añadidos por el usuario

   * <p><a href=TBarraHerramientas.java>Código fuente</a>

   * <b>Historico de Modificaciones:</b><br>

   * Creación 1.00	1999/12/20	Gdiez<br>

   * Modificacion   2000/07/13  Jbachil<br> 

   * @author Gdiez

   * @author Jbachil

   * @version 1.00

   * @since 1.2

   */



public class TBarraHerramientas extends javax.swing.JPanel implements Serializable

{   

    /**Constante que representa el borde normal de un botón de la barra*/

    protected static final int NORMAL = 0;

    /**Constante que representa el borde hundido de un botón de la barra*/

    protected static final int HUNDIDO = 1;

    /**Constante que representa el borde levantado de un botón de la barra*/

    protected static final int LEVANTADO = 2;

    

      /**

     * Constante que representa que control de activacion del botón lo tiene el componente con el foco

     */

    static public final int CONTROL_DEFECTO=0;      // control de activacion lo tiene el componente activo

    /**

     * Constante que representa que control de activacion del botón está siempre activo

     */    

    static public final int SIEMPRE_ACTIVO=1;       // se activa el boton independientemente del componente que tenga el foco

    /**

     * Constante que representa que control de activacion del botón está siempre desactivado

     */        

    static public final int SIEMPRE_DESACTIVADO=2;  // se desactiva el boton independientemente del componente que tenga el foco    

    

    /**

     * Nombre que representa la barra de herramientas general vacia

     */    

    static final String BARRA_VACIA="DatosBHVacia";    

    /**

     * Nombre de la clase (incluyendo package) donde se almacenan las constantes 

     * con los valores de las teclas que tienen asociados metodos que se ejecutan al pulsarlas.

     * Valor asignado: "mapfre.trn.ControlTeclas"

     */

    static final String CLASE_CONTROL_TECLAS="mapfre.trn.ControlTeclas";



    /**

     * Constante que almacena un string arbitrario que se puede

     * añadir como valor en la propiedad "Clase propietaria" para indicar 

     * que se va a ejecutar un metodo de tecla.

     * Valor asignado: $tecla

     */

    static final String TECLA="$tecla";



    /**

     * Constante que almacena un string arbitrario que se puede

     * añadir como valor en la propiedad "Clase propietaria" para indicar 

     * que se va a ejecutar un metodo cuyo propietario es el objeto elegido

     * en la propiedad "objeto padre"

     * Valor asignado: $objeto

     */

    static final String OBJETO="$objeto";



    /**

     * Constante que almacena un string arbitrario que se puede

     * añadir como valor en la propiedad "Clase propietaria" para indicar 

     * que se va a ejecutar un metodo cuyo propietario es el componente que tiene el foco

     * Valor asignado: Globales

     */

    static final String COMPONENTE_ACTIVO="Globales";



    /**

     * Directorio donde se buscan las imagenes para los botones de la barra de herramientas

     * Valor asignado: Globales.getPropiedadConfiguracion("RUTA.REPOSITORIO")+"/mapfre/trn/images/"

     */

    static final String DIR_IMAGENES=Globales.getPropiedadConfiguracion("RUTA.REPOSITORIO")+"/mapfre/trn/images/";    

    /** Cuenta el nº de llamadas a los metodos set de las propiedades

     * cuando se ha llamado a todos se recalcula las matrices de botones.

     * <p>NECESARIO por el problema que surge cuando VisualCafe genera el codigo de las propiedades

     *de forma aleatoria sin seguir un orden preestablecido*/

    private int numeroSet=0; 

    /**Contiene un indice y los Hashcode de los label de iconos*/

    private java.util.Hashtable htbCodigo = new java.util.Hashtable();  

    /**Array de label que representan los botones de la barra de herramientas.*/

    private javax.swing.JLabel[] lblIcono;  

    /**Array de separadores entre los botones. Hay que incluir el simbolo en la lista de iconos. <p>

    /*Dos tipos: separador vertical (simbolo = |), separador vacio (simbolo <blanco>).*/

    private mapfre.com.c.GUI.TSeparador[] sprIcono; 

    /**nº de boton sobre el que esta el raton.*/

    private int botonActual;    

    /**nº de boton donde se ha pulsado el raton.*/

    private int botonPulsado;   

    /**Propietario de los flags: Si no es nulo, los flags se ejecutarán como métodos de este objeto*/

    private Object propietarioFlags=null;   

    /**Objeto elegido como propietario de los metodos a ejecutar

    *cuando se ha elegido en la clase propietaria el valor "$objeto" */

    private Object objetoPadre=null;  

    /**sustituye al array botones.propietarios cuando se quiere

     *que el propietario del metodo sea un objeto*/

    private Object[] objetosPropietarios=null; 

    /**Auditor de eventos de ratón*/

    private SymMouse aSymMouse = new SymMouse();

    /**Almacena el nombre de la clase que contiene los botones por defecto*/    

    private String botonesDefecto="DatosBHVacia"; 



    // Clase con atributos asociados a propiedades del bean

    /**

	 * Repositorio de información acerca de cada uno de los botones de 

	 * la barra de herramientas. 

	 */

     

    class Botones

    {

        

        //new 19032001

        /**Array de estados de pulsación. Puede ser 

	     * TBarraHerramientas.HUNDIDO, TBarraHerramientas.NORMAL,

	     * TBarraHerramientas.LEVANTADO*/

        private int[] estadoPulsacion=null;

        /**Array de propietarios estaticas a los que pertenecen los métodos  a ejecutar.*/

        private String[] propietarios=null;  

        //private String[] tipos=null; // Tipos de componentes para los cuales el boton correspondiente este activo

        /**Lista de flags asociada a los botones. Un flag es un método que

        * se invoca sobre el componente que tiene el foco actualmente y que

        * informa a la barra de herramientas sobre si el botón debe estar

        * habilitado, deshabilitado, hundido, levantado y su icono*/

        private String[] flags = null;

        /**Array de Strings conteniendo los nombres de métodos a utilizar.*/

        private String[] metodos=null; 

        /**Array de Strings conteniendo los mensajes emergentes de cada botón.*/

        private String[] tooltips=null;    

        /**Array de Strings conteniendo los nombres de los iconos (sin la trayectoria).*/

        private String[] iconos=null;  

//        private String[] estados=null;  // Array de Strings conteniendo dos palabras separadas por comas. Cada palabra puede tener el valor true o false.

                                // La 1ª palabra indica si el boton esta activo o no.

                                // La 2ª palabra indica para botones especiales si esta pulsado (hundido) o liberado (levantado).

        /**Array de boolean que indica si un boton esta activo o no*/                                

        private boolean[] activos;

        /**Array de int que indica el modo de control sobre la activacion del boton.*/

        private int[] activacion; 

        /**@deprecated Array de boolean que indica si un boton esta pulsado o no*/

        private String[] pulsados=null; 



        // nº de elementos de los arrays anteriores

        /**nº de iconos sin contar separadores*/

        private int numIconos=0; // 

        /**Número total de propietarios de métodos de los botones*/

        private int numPropietarios=0;

        /**Numero total de métodos asociados a los botones*/

        private int numMetodos=0;

        /**Número total de elementos del array de activos*/

        private int numActivos=0;

        /**Número total de elementos del array de pulsados*/

        private int numPulsados=0;

        /**Número total de elementos del array de toolTips*/

        private int numTools=0;

    }  

    /**Botones por defecto*/

    private Botones botonesAutomatico=new Botones(); 

    /**Botones adicionales elegidos por el programador*/

    private Botones botonesManual=new Botones(); 

    /**Union de los arrays automatico y manual*/

    private Botones botones=new Botones(); 



    /**

	 * Constructor Principal. Construye una barra de herramientas sin botones.

	 */     

    public TBarraHerramientas()

    {



        //{*{INIT_CONTROLS

        setLayout(new FlowLayout(FlowLayout.LEFT,5,5));

        setSize(0,0);

        //}*}

        inicio();

        refrescarBarra(Globales.getComponenteActual());

        

        //{{REGISTER_LISTENERS

        //}}

    }    

    

    /**

	 * Constructor con parametro. Construye una barra de herramientas sin botones.

	 * Establece como objeto padre de los métodos el argumento "padre".

	 * @param padre objeto propietario de los metodos

	 */          

    public TBarraHerramientas(Object padre)

    {

         objetoPadre=padre;

         setLayout(new FlowLayout(FlowLayout.LEFT,5,5));

         setSize(79,26);

         refrescarBarra(Globales.getComponenteActual());

    }

    /**Lista de ímágenes de los botones*/

    private javax.swing.Icon imgIcono[] = null;

    /**Borde plano del botón*/

    private javax.swing.border.EtchedBorder bordeInicio1 = new javax.swing.border.EtchedBorder();//java.awt.Color.lightGray,java.awt.Color.lightGray);

    /**Borde levantado del botón*/

    private javax.swing.border.EmptyBorder bordeVacio1 = new javax.swing.border.EmptyBorder(1,1,2,2);

    private javax.swing.border.EmptyBorder bordeVacio2 = new javax.swing.border.EmptyBorder(1,1,0,0);

    private javax.swing.border.EmptyBorder bordeVacio3 = new javax.swing.border.EmptyBorder(0,0,1,1);

    private javax.swing.border.CompoundBorder bordeInicio = new javax.swing.border.CompoundBorder(bordeInicio1,bordeVacio1);

    private javax.swing.border.SoftBevelBorder bordeNormal1 = new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED);

    private javax.swing.border.CompoundBorder bordeNormal = new javax.swing.border.CompoundBorder(bordeNormal1,bordeVacio3);

        //private javax.swing.border.EmptyBorder bordeNormal = new javax.swing.border.EmptyBorder(0,0,0,0);

    /**Borde hundido del botón*/

    private javax.swing.border.SoftBevelBorder bordePulsado1 = new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED);

    private javax.swing.border.CompoundBorder bordePulsado = new javax.swing.border.CompoundBorder(bordePulsado1,bordeVacio2);

       /**Ausencia de borde*/

   // private javax.swing.border.EmptyBorder bordeVacio = new javax.swing.border.EmptyBorder(0,0,0,0);



    

    /*Metodo de inicializacion de la barra de herramientas*/

    private void inicio()

    {

        setBotonesDefecto("DatosBHVacia");        

    }

    

    /**

     * Define cual es el objeto sobre el que ejecutar los flags (como métodos).

     */

     

     

    public void setPropietarioFlags(Object poPropietarioFlags)

    {

        propietarioFlags = poPropietarioFlags;

    }

    

    public Object getPropietarioFlags()

    {

        return propietarioFlags;

    }



    /**

	 * Llama a todos los metodos set correspondientes a las propiedades nº 1,3,4,5,6,7,8

	 * <i>Objeto Padre</i>, <i>Iconos Botones</i>, <i>Propietarios Botones</i>, <i>Flags Botones</i>, 

	 * <i>Metodos Botones</i>, <i>ToolTips botones</i> y <i>Pulsados Botones</i>. Ver enlaces en el apartado <b>See Also:</b>

	 *

	 * 

	 * @param pObjeto Objeto padre de los métodos

	 * @param pIconos Lista de iconos

	 * @param pPropietarios Lista de identificadores <c>$tecla</c>, <c>$objeto</c> y <i>Nombre clase</i>

	 * @param pFlags Lista de componentes que activan cada boton. 

	 * @param pMetodos Lista de métodos que ejecutan los botones

	 * @param pPulsados Lista de estados de los botones (pulsado/no pulsado , activado/desactivado)

	 * @param pTooltips Lista de ToolTips en formato módulo, código

	 * @see #setObjetoPadre(java.lang.Object)

	 * @see #setIconosBotones(java.lang.String[])

	 * @see #setPropietariosBotones(java.lang.String[])

	 * @see #setFlagsBotones(java.lang.String[])

	 * @see #setMetodosBotones(java.lang.String[])

	 * @see #setTooltipsBotones(java.lang.String[])

	 * @see #setPulsadosBotones(java.lang.String[])

	 */         

    public void setBotones(Object pObjetoPadre, String[] pIconos, String[] pPropietarios, String[] pFlags, String[] pMetodos, String[] pPulsados, String[] pTooltips)

    {

        setObjetoPadre(pObjetoPadre);

        setIconosBotones(pIconos);

        setPropietariosBotones(pPropietarios);

        setFlagsBotones(pFlags);

        setMetodosBotones(pMetodos);

        setTooltipsBotones(pTooltips);

        setPulsadosBotones(pPulsados);

    }

    

    /**

	 * Permite elegir el objeto propietario del método a ejecutar por los botones

	 * de la barra de herramientas cuando en la propiedad <i>propietariosBotones</i> tengan 

	 * el valor <i>$objeto</i>.

	 * 

	 * @param pObjeto Objeto propietario

	 * @see #getObjetoPadre()

	 * @see #setPropietariosBotones(java.lang.String[])

	 */         

    public void setObjetoPadre(Object  pObjetoPadre)

    {   

        objetoPadre=pObjetoPadre;

    }



    /**

	 * Devuelve el objeto propietario del metodo a ejecutar cuando en la propiedad propietarioBoton se ha elegido <i>$objeto</i>

	 *

	 * @return objeto elegido como padre, o el Frame o Dialogo actual si en VisualCafe se elige <Default> en la propiedad <i>Objeto Padre</i>

	 * @see #setObjetoPadre(java.lang.Object)

	 * @see #setPropietariosBotones(java.lang.String[])	 

	 */     

    public Object getObjetoPadre()

    {   

        if (objetoPadre==null)

        {

            objetoPadre = Globales.getPadre(this);

        }            

        return objetoPadre;

    }



    /**

	 * Este metodo se puede llamar para elegir un objeto propietario y el metodo correspondiente

	 * para cada uno de los botones (en las propiedades solo se puede elegir un objeto propietario para todos los botones) 

	 * @param indice nº del boton empezando por cero

	 * @param pPropietario objeto propietario del metodo

	 * @param pMetodo metodo a ejecutar

	 * @see #setObjetoPadre(java.lang.Object)

	 * @see #setMetodosBotones(java.lang.String[])

	 */         

    private void setObjetoMetodo(int indice, Object pPropietario, String pMetodo)

    {

        if (indice>=botones.numPropietarios || indice<0)

            return;

        if (pPropietario==null)

            return;

        if (this.objetosPropietarios==null)

        {

            this.objetosPropietarios=new Object[botones.numPropietarios];

            for(int i=0;i<botones.numPropietarios;i++)

                this.objetosPropietarios[i]=null;

        }

        this.objetosPropietarios[indice]=pPropietario;

        if (!pMetodo.trim().equals("") && pMetodo!=null)

            this.botones.metodos[indice]=pMetodo;

    }



    /**

     *  Cambia el icono de un botón determinado.

     */

     public void setIconoBoton(int piBoton,String psIcono)

     {

        if (botones.iconos.length>piBoton)

        {

            botones.iconos[piBoton]=psIcono;

            imgIcono[piBoton] = Herramientas.getImagenIcono(botones.iconos[piBoton]);

            lblIcono[piBoton].setIcon(imgIcono[piBoton]);

            lblIcono[piBoton].setOpaque(false);

        }

     }

     

    /**

     * Controla la activación o desactivación del boton de índice piIndice. <p>

     * 

     * <p>

     * Si piActivacion = TBarraHerramientas.SIEMPRE_ACTIVO, el boton permanece activo independientemente del componente que gane el foco<p>

     * Si piActivacion = TBarraHerramientas.SIEMPRE_DESACTIVADO, el boton permanece desactivado independientemente del componente que gane el foco     

     *      (En esos dos casos no se refresca (se activa o desactiva) el boton en funcion del componente que tenga el foco.)<p>

     * Si piActivacion = TBarraHerramientas.CONTROL_DEFECTO, la activacion o desactivacion del boton la realiza el metodo "refrescarBarra"

     *      que es llamado cada vez que un componente gana el foco, y depende de ese componente según la propiedad <i>flagBotones</i>.<p>

     * @param piIndice nº del boton empezando por cero. <b>Nota:</b> La numeración de los botones empieza por los botones por defecto de la barra de herramientas

     * y contiuna por los botones añadidos manualmente.

     * @param piActivacion Los valores posibles:

     * <ul>

     * <li>TBarraHerramientas.SIEMPRE_ACTIVO

     * <li>TBarraHerramientas.SIEMPRE_DESACTIVADO

     * <li>TBarraHerramientas.CONTROL_DEFECTO

     * </ul>

     * @see #getActivacionBoton(int)

     * @see #setFlagsBotones(java.lang.String[])

     */

    public void setActivacionBoton(int piIndice, int piActivacion)

    {

        if (piIndice<this.botones.numActivos)

        {

            this.botones.activacion[piIndice]=piActivacion;

            if (piActivacion==SIEMPRE_ACTIVO)

                this.lblIcono[piIndice].setEnabled(true);

            else if (piActivacion==SIEMPRE_DESACTIVADO)

                this.lblIcono[piIndice].setEnabled(false);

            else if (piActivacion==CONTROL_DEFECTO)

                  refrescarBarra();

            else 

                TBarraEstado.setMensajeError("Error: el 2º parametro solo permite valores 0, 1 y 2");

        }

    }

    

    /**

     * Devuelve el modo de control sobre la activacion del boton.

     * @param piIndice nº del boton empezando por 0. La numeración de los botones empieza por los botones por defecto de la barra de herramientas

     * y continúa por los botones añadidos manualmente.

     * @return      

     * <ul>

     * <li>TBarraHerramientas.SIEMPRE_ACTIVO

     * <li>TBarraHerramientas.SIEMPRE_DESACTIVADO

     * <li>TBarraHerramientas.CONTROL_DEFECTO

     * </ul>

     * @see #setActivacionBoton(int, int)

     */

    public int getActivacionBoton(int piIndice)

    {

        if (piIndice<this.botones.numActivos)

        {

            return this.botones.activacion[piIndice];

        }

        return -1;

    }

    



    /**

     * Activa o desactiva el boton de indice piIndice. <p>

     * Esta funcion es llamada desde el metodo refrescarBarra que se ejecuta al ganar el foco un componente.<br>

     * Los botones se habilitan o deshabilitan en funcion de la lista de componentes que aparece en la propiedad "flagsBotones".<br>

     * La numeración de los botones empieza por los botones por defecto de la barra de herramientas<br>

     * y contiuna por los botones añadidos manualmente.<br>

     * Este metodo solo tiene efecto cuando el atributo "activacion" que se modifica con la funcion publica "setActivacionBoton"<br>

     * tiene el valor "CONTROL_DEFECTO".<br>

     *

     * @param piIndice nº del boton empezando por cero.

     * @param pbActivo Valores true (boton activo) o false (desactivado)

     * @see #isActivoBoton(int)

     */

    private void setActivoBoton(int piIndice, boolean pbActivo)

    {

        if (piIndice<this.botones.numActivos)

        {

            this.botones.activos[piIndice]=pbActivo;

        }

        this.lblIcono[piIndice].setEnabled(pbActivo);

    }

    

    /**

     * Devuelve true si el boton elegido esta activo.

     * La numeración de los botones empieza por los botones por defecto de la barra de herramientas     .

     *

     * @param piIndice nº del boton empezando por 0

     * @return true (boton activo) o<br> false (boton desactivado)

     * @see #setActivoBoton(int, boolean)

     */

    private boolean isActivoBoton(int piIndice)

    {

        if (piIndice<this.botones.numActivos)

        {

            return this.botones.activos[piIndice];

        }

        return false;   // si no se ha dado valor a la propiedad 'activos' devuelvo false

    }



    /**

     * Asigna valor para botones con dos estados: pulsado, liberado.

     * <br>

     * Por defecto los botones estan liberados<p>

     * Un ejemplo de este tipo de botones es el boton de negrita de la barra de herramientas de un procesador de texto

     * que aparece pulsado cuando esta elegido el modo negrita y liberado cuando no esta elegido el modo negrita. <p>

     * La programacion de estos botones especiales la tiene que hacer el programador de la siguiente manera:<p>

     *  1.- Definir como Clase propietaria: <i>$objeto</i><br>

     *  2.- Objeto padre = <i>(Default)</i> (el padre del metodo sera el Frame o Dialogo)<br>

     *  3.- El metodo a ejecutar debe estar en el Frame o Dialogo y debe contener el siguiente codigo:<br>

     *

     *<pre>     

     *   public void nombreMetodo()

     *   {

     *      int numeroBoton=0; // elegir el numero del  boton que corresponda (el nº del 1º boton es el 0)

     *      this.TBarraHerramientas.setPulsadoBoton(numeroBoton,!this.TBarraHerramientas.isPulsadoBoton(numeroBoton));

     *   }

     *</pre>

     *      Con este codigo se cambia el estado pulsado del boton de true a false o viceversa.<br>

     *      Para saber en un momento dado el estado pulsado de un boton se usa el metodo<br>

     *<pre>

     *          boolean pulsado=this.TBarraHerramientas.isPulsadoBoton(numeroBoton);

     *</pre>

     * @param piIndice nº del boton empezando por 0

     * @param pbPulsado true (pulsado) o <br>false (liberado)

     * @see #isPulsadoBoton(int)

     */

    public void setPulsadoBoton(int piIndice, boolean pbPulsado)

    {

        Boolean bPulsado=new Boolean(pbPulsado);

        if (piIndice<this.botones.numPulsados)

        {

            this.botones.pulsados[piIndice]=bPulsado.toString();

              if (lblIcono[piIndice].isEnabled())

            {

                if (pbPulsado)

                {

                       lblIcono[piIndice].setBorder(bordePulsado);     

                   }

                   else

                   {

                       lblIcono[piIndice].setBorder(bordeNormal);     

                   }

                   lblIcono[piIndice].repaint();

               }

        }

    }



    //new 19032001

    /**A partir de un número de botón, cambia su estado de pulsación 

     * al nuevo estado y actualiza los bordes*/

    private void setPulsadoBoton(int piIndice, int estado)

    {

        botones.estadoPulsacion[piIndice] = estado;

        actualizaPulsados(piIndice, estado);

    }

    

    /**

     * Indica si el boton correspondiente esta pulsado o liberado

     * 

     * @param pnIndice nº del boton empezando por 0

     * @return true (boton pulsado) o false (boton liberado)

     * @see #setPulsadoBoton(int, boolean)

     */

    public boolean isPulsadoBoton(int pnIndice)

    {

        if (pnIndice<this.botones.numPulsados)

        {

            return new Boolean(this.botones.pulsados[pnIndice]).booleanValue();

        }

        return false;   // si no se ha dado valor a la propiedad 'pulsados' devuelvo false

    }



    /**

     * Inicializa arrays de tooltips cada vez que se elige una botonera general nueva

     * 

     * @param pTooltips arrays de tooltips

     */

    protected void iniciaTooltipsBotones(String[]  pTooltips)

    {

        botonesAutomatico.tooltips=pTooltips;

        botones.tooltips=pTooltips;

        if (botones.tooltips==null)

        {

            botonesAutomatico.numTools=0;

            botones.numTools=0;

            return;

        }

        botonesAutomatico.numTools=pTooltips.length;

        botones.numTools=pTooltips.length;

        

        actualizaTooltips();

    }

    



    /** InvocationTargetException

     * Establece array de tooltips especificos creados por el programador.

     * <p>Cada una de las posiciones del array es un string de la forma Módulo,código 

     * (ejemplo: <code>"em,1"</code>) que permite cargar la etiqueta correspondiente como 

     * mensaje emergente.

     * <p>Nótese que este método solo establece los tooltips para los botones

     * definidos por el programador y no para los que ya vienen por defecto.

     * 

     * @param pTooltips arrays de tooltips

     * @see #getTooltipsBotones()

     */

    public void setTooltipsBotones(String[]  pTooltips)

    {

        botonesManual.tooltips=pTooltips;

        if (java.beans.Beans.isDesignTime()) return;

        if (botonesManual.tooltips==null)

        {

            botonesManual.numTools=0;

            return;

        }

        botonesManual.numTools=pTooltips.length;

        if (this.numeroSet<7)

            this.numeroSet++;

        if (this.numeroSet==7 || (this.numeroSet==6 && this.getBotonesDefecto().equals("DatosBHVacia")))

            this.actualiza();

    }

    

    /**

     * Recupera el array de tooltips de los botones creados por el programador.

     *

     * @return array de tooltips

     * @see #setTooltipsBotones(java.lang.String[])

     */

    public String[] getTooltipsBotones()

    { 

        return botonesManual.tooltips;

    }



    /**

     * Inicializa arrays de estados de pulsacion de los botones cada vez que se elige una botonera general nueva

     * 

	 * @param pPulsado Array de boolean

	 */

    protected void iniciaPulsadosBotones(String[]  pPulsados)

    {

        //new 19032001

        if (pPulsados!=null)

        {            

            botones.estadoPulsacion = new int[pPulsados.length];

            for (int i=0;i<botones.estadoPulsacion.length;i++)

            {

                botones.estadoPulsacion[i]=NORMAL;

            }

        }

        else

        {

            botones.estadoPulsacion = new int [0];

        }

        botonesAutomatico.estadoPulsacion = botones.estadoPulsacion;

        

        //aqui se recupera el código anterior        

        botonesAutomatico.pulsados=pPulsados;

        botones.pulsados=pPulsados;

        if (botones.pulsados==null)

        {

            botonesAutomatico.numPulsados=0;

            botones.numPulsados=0;

            return;

        }

        botonesAutomatico.numPulsados=pPulsados.length;       

        botones.numPulsados=pPulsados.length;       

        actualizaPulsados();

    }

        

    

    

    /**

	 * Establece array de estados de pulsacion de botones específicos 

	 * creados por el programador. Nótese que con este método no se puede

	 * especificar el estado de los botones que vienen por defecto.

	 * <p>Cada posición del array indica si el botón aparece pulsado o no mediante

	 * los identificadores "true" (para indicar que está pulsado) y "false" (en otro caso).

	 * <p>Nótese que la posición 0 del array hace referencia al primer botón.

	 * @param pPulsado array de estados de pulsación de los botones.

	 * @see #getPulsadosBotones()

	 * @see setPulsadoBoton(int, boolean)

	 */         

    public void setPulsadosBotones(String[]  pPulsado)

    {

        

        botonesManual.pulsados=pPulsado;

        if (botonesManual.pulsados==null)

        {

            botonesManual.numPulsados=0;

            return;

        }

        botonesManual.numPulsados=pPulsado.length;

        

        if (this.numeroSet<7)

            this.numeroSet++;

        if (this.numeroSet==7 || (this.numeroSet==6 && this.getBotonesDefecto().equals("DatosBHVacia")))

            this.actualiza();

    }

    

    

   /**

    * Devuelve array de estados de pulsacion de botones especificos añadidos por el usuario. 

    * <br>Cada posicion del array es una cadena con los valores <code>"true"</code> o <code>"false"</code>

    *

    * @return array de estados de pulsacion de botones

    * @see #setPulsadosBotones(java.lang.String[])

    */

   public String[]  getPulsadosBotones()

   {

        return botonesManual.pulsados;

   }



   /**

    * Para inicializar array de propietarios de metodos cada vez que se elige una botonera general nueva

    * 

    * @param pPropietarios  array de propietarios

    */

   protected void iniciaPropietariosBotones(String[]  pPropietarios)

   {

        botonesAutomatico.propietarios=pPropietarios;

        botones.propietarios=pPropietarios;

        if (botones.propietarios==null)

        {

            botonesAutomatico.numPropietarios=0;

            botones.numPropietarios=0;

            return;

        }

        botonesAutomatico.numPropietarios=pPropietarios.length;

        botones.numPropietarios=pPropietarios.length;

   }

   

   /**

    * Establece array de propietarios de los botones añadidos por el usuario.<br>

    * Valores posibles de cada elemento del array:<p>

    * 1. Nombre de clase estática propietaria del metodo.<br>

    * 2. Literal "$objeto": propietario del metodo es el objeto elegido en la propiedad 1: Objeto padre.<br>

    * 3. Literal  "Globales": el objeto propietario es el componente que tiene el foco en ese momento.<br>

    * 4. Literal "$tecla": se ejecuta el código programado en el evento de pulsación de la tecla del componente que tiene el foco. En la propiedad Metodo a ejecutar se escribirá el nombre de la constante definida en la clase ControlTeclas (SALIR, MODIFICAR,…) que contiene el código de la tecla.<p>

    * 

    * @param pPropietarios array de propietarios

    * @see #getPropietariosBotones()

    */ 

   public void setPropietariosBotones(String[]  pPropietarios)

   {

        this.botonesManual.propietarios=pPropietarios;

        if (botonesManual.propietarios==null)

        {

            botonesManual.numPropietarios=0;

            return;

        }

        botonesManual.numPropietarios=pPropietarios.length;

        if (this.numeroSet<7)

            this.numeroSet++;

        if (this.numeroSet==7 || (this.numeroSet==6 && this.getBotonesDefecto().equals("DatosBHVacia")))

            this.actualiza();    

   }

   

   /**

    * Devuelve el array de los identificadores de propietarios de los botones. 

    * <p>Para mas información sobre estos identificadores consultar <a href=#setPropietariosBotones(java.lang.String[])>setPropietariosBotones(java.lang.String[])</a>.

    *

    * @return array de propietarios especificos creados por el programador

    * @see #setPropietariosBotones(java.lang.String[])

    */

   public String[] getPropietariosBotones()

   {   

        return this.botonesManual.propietarios;

   }



   /**

    * Para inicializar array de tipos cada vez que se elige una botonera general nueva

    * @deprecated Utilizar iniciaFlagsBotones(java.lang.String[])

    * @param pPropietarios array de tipos

    * @param pTipos

    */

   protected void iniciaTiposBotones(String[]  pTipos)

   {/*

        botonesAutomatico.tipos=pTipos;    

        botones.tipos=pTipos;    

        if (botones.tipos==null)

        {

            botonesAutomatico.numActivos=0;

            botones.numActivos=0;

            return;

        }

        botonesAutomatico.numActivos=pTipos.length;

        botones.numActivos=pTipos.length;    

        botones.activos=new boolean[botones.numActivos];

        botones.activacion=new int[botones.numActivos];

        for (int x=0;x<botones.numActivos;x++)

            botones.activacion[x]=CONTROL_DEFECTO;        

            */

       iniciaFlagsBotones(pTipos);

   }

   

   

   

   /**

    * Establece nombres de los componentes para los cuales va a estar activo

    * este botón de la barra (si hay mas de uno se pueden escribir todos 

    * los nombre seguidos, separar por espacios o comas).

    * Si queremos que el botón este activo para todos los componentes, se dejará una línea en 

    * blanco para esa posición del array

    * 

    * @param pTipos array de componentes para los cuales el boton i-esimo esta activo. <br>La posicion 0 del array hace referencia al boton primero y asi sucesivamente

    * @see #getTiposBotones()

    * @deprecated Usar setFlagsBotones(java.lang.String[])

    */         

   public void setTiposBotones(String[]  pTipos)

   {

/*        botonesManual.tipos=pTipos;    

        if (botonesManual.tipos==null)

        {

            botonesManual.numActivos=0;

            return;

        }

        botonesManual.numActivos=pTipos.length;

        if (this.numeroSet<7)

            this.numeroSet++;

        if (this.numeroSet==7 || (this.numeroSet==6 && this.getBotonesDefecto().equals("DatosBHVacia")))

            this.actualiza();    */

        setFlagsBotones(pTipos);

   }



   /**

    * Devuelve array de nombres de componentes que activa cada boton especifico 

    * creado por el programador

    *

    * @return Array de nombres de componentes que activan a cada uno de los botones. 

    * <br>La posicion 0 del array hace referencia al primer botón añadido por el programador y asi sucesivamente.

    * @see #setTiposBotones(java.lang.String[])

    * @deprecated Usar getFlagsBotones(java.lang.String[])    

    */

   public String[] getTiposBotones()

   {

       //return botonesManual.tipos;

       return getFlagsBotones();

   }



   /**

    * Para inicializar array de flags cada vez que se elige una botonera general nueva

    * @param pFlags array de flags

    */

   protected void iniciaFlagsBotones(String[]  pFlags)

   {

        botonesAutomatico.flags=pFlags;    

        botones.flags=pFlags;    

        if (botones.flags==null)

        {

            botonesAutomatico.numActivos=0;

            botones.numActivos=0;

            return;

        }

        botonesAutomatico.numActivos=pFlags.length;

        botones.numActivos=pFlags.length;    

        botones.activos=new boolean[botones.numActivos];

        botones.activacion=new int[botones.numActivos];

        for (int x=0;x<botones.numActivos;x++)

            botones.activacion[x]=CONTROL_DEFECTO;                         

   }

   

   

   

   /**

    * Establece los flags para los cuales va a estar activo este botón de la bara

    * Si queremos que el botón este activo para todos los componentes, se dejará una línea en blanco para esa posición del array

    * 

    * @param pFlags array de flags para los cuales el boton i-esimo esta activo. <br>La posicion 0 del array hace referencia al boton primero y asi sucesivamente

    * @see #getFlagsBotones()

    */         

   public void setFlagsBotones(String[]  pFlags)

   {

        botonesManual.flags=pFlags;    

        if (botonesManual.flags==null)

        {

            botonesManual.numActivos=0;

            return;

        }

        botonesManual.numActivos=pFlags.length;

        if (this.numeroSet<7)

            this.numeroSet++;

        if (this.numeroSet==7 || (this.numeroSet==6 && this.getBotonesDefecto().equals("DatosBHVacia")))

            this.actualiza();    

   }



   /**

    * Devuelve array de flags que activa cada boton especifico creado por el programador

    *

    * @return array de flags que activan a cada uno de los botones. <br>La posicion 0 del array está relacionada con el primer botón y asi sucesivamente.

    * @see #setFlagsBotones(java.lang.String[])

    */ 

   public String[] getFlagsBotones()

   {

       return botonesManual.flags;

   }

    

    

   /**

    * Para inicializar array de metodos cada vez que se elige una botonera por defecto nueva

    * 

    * @param pPropietarios array de metodos

    * @param pMetodos

    */

   protected void iniciaMetodosBotones(String[]  pMetodos)

   {

        botonesAutomatico.metodos=pMetodos;

        botones.metodos=pMetodos;

        if (botones.metodos==null)

        {

            botonesAutomatico.numMetodos=0;    

            botones.numMetodos=0;    

            return;

        }

        botonesAutomatico.numMetodos=pMetodos.length;

        botones.numMetodos=pMetodos.length;

   }

   

   /**

    * Establece los nombres de los métodos a ejecutar al hacer click sobre el icono de cada botón.

    * <br>Si la clase propietaria es $objeto esta funcion hace referencia al nombre del metodo a ejecutar sobre el objeto

    * <br>Si la clase propietaria tiene el valor $tecla aquí se escribe el nombre

    * de la constante que almacena el código de la tecla de la que se quiere simular su pulsación para ejecutar el código que esta tenga programada.

    * @deprecated ver setMetodosAccion(String[]  pMetodos)

    * @param pMetodos array de metodos

    * @see #getMetodosBotones()

    * @see #setMetodosAccion(String[])

    */         

   public void setMetodosBotones(String[]  pMetodos)

   {

        setMetodosAccion(pMetodos);

   }

       

   /**

    * Establece los nombres de los métodos a ejecutar al hacer click sobre el icono de cada botón.

    * <br>Si la clase propietaria es $objeto esta funcion hace referencia al nombre del metodo a ejecutar sobre el objeto

    * <br>Si la clase propietaria tiene el valor $tecla aquí se escribe el nombre

    * de la constante que almacena el código de la tecla de la que se quiere simular su pulsación para ejecutar el código que esta tenga programada.

    * 

    * @param pMetodos array de metodos

    * @see #getMetodosAccion()

    */         

   public void setMetodosAccion(String[]  pMetodos)

   {

        botonesManual.metodos=pMetodos;

        if (botonesManual.metodos==null||botonesManual.metodos.equals(""))

        {

            botonesManual.numMetodos=0;

            return;

        }

        botonesManual.numMetodos=pMetodos.length;

        if (this.numeroSet<7)

            this.numeroSet++;

        if (this.numeroSet==7 || (this.numeroSet==6 && this.getBotonesDefecto().equals("DatosBHVacia")))

            this.actualiza();    

   }

            

   /**

    * Recupera lista de nombres de métodos asociados a los botones añadidos por el usuario. 

    * @deprecated ver getMetodosAccion()

    * @return array de nombres de metodos añadido a los botones por defecto

    * @see #setMetodosBotones(java.lang.String[])

    * @see #getMetodosAccion()

    */

   public String[] getMetodosBotones()

   {

        return getMetodosAccion();

   }

   

   /**

    * Recupera lista de nombres de métodos asociados a los botones añadidos por el usuario. 

    *

    * @return array de nombres de metodos añadido a los botones por defecto

    * @see #setMetodosAccion(java.lang.String[])

    */

   public String[] getMetodosAccion()

   {

        return botonesManual.metodos;

   }

   /**

    * Para inicializar array de nombre de iconos cada vez que se elige una botonera por defecto nueva

    * 

    * @param pPropietarios array de propietarios

    * @param pIconos

    */

   protected void iniciaIconosBotones(String[]  pIconos)

   {

        botonesAutomatico.iconos=pIconos;

        botones.iconos=pIconos;

        if (botones.iconos==null)

        {

            botonesAutomatico.numIconos=0;    

            botones.numIconos=0;    

            return;

        }

        botonesAutomatico.numIconos=pIconos.length;

        botones.numIconos=pIconos.length;

 

        actualizaIconos();

   }   

   

   /**

    * Establece los nombres de los ficheros de iconos con su extensión.<br>

    * No hay que poner trayectoria. Los ficheros se buscan en el directorio de imágenes de la aplicación.<br>

    * Se puede colocar separadores entre los iconos incluyendo una línea en blanco entre los nombres de los iconos (separador vacio) o incluyendo una línea con el simbolo |  (separador vertical).    

    * 

    * @param pIconos Array de String con el nombre físico de los iconos.

    * @see #getIconosBotones()

    */

   public void setIconosBotones(String[]  pIconos)

   {    

        botonesManual.iconos=pIconos;

        if (pIconos==null)

        {

            botones.numIconos=0;        

            return;            

        }

        botonesManual.numIconos=pIconos.length;

        if (this.numeroSet<7)

            this.numeroSet++;

        if (this.numeroSet==7 || (this.numeroSet==6 && this.getBotonesDefecto().equals("DatosBHVacia")))

            this.actualiza();    

   }



   /**

    * Recupera un array con los nombres de los iconos añadidos a los botones por defecto.

    *

    * @return array con los nombres de iconos añadido a los botones por defecto.

    * @see #setIconosBotones(java.lang.String[])

    */

   public String[] getIconosBotones()

   {

        return botonesManual.iconos;  

   }



   /**

    * Nombre de la clase donde se almacenan los datos de una botonera estandar. 

    * Se pueden añadir botones a la botonera estandar rellenando el resto de las propiedades.

    * Los nombre de las clases que aparecen en la lista se toman del método <a href="DatosBH.html#botoneras()">DatosBH.botoneras()</a>.

    * <p>Para ver las barras por defecto, consultar las subclases de <a href="DatosBH.html">DatosBH</a>.

    * @param psBotonesDefecto Nombre de la clase

    * @see #getBotonesDefecto()

    * @see mapfre.com.c.GUI.DatosBH

    */         

   public void setBotonesDefecto(String psBotonesDefecto)

   {

        if (psBotonesDefecto=="null" || psBotonesDefecto==null)

            return;

        this.botonesDefecto=psBotonesDefecto;



        if (this.getBotonesDefecto().equals("DatosBHVacia"))

        {

            this.iniciaIconosBotones(null);

            this.iniciaTooltipsBotones(null);

            this.iniciaPulsadosBotones(null);

            this.iniciaPropietariosBotones(null);

            this.iniciaFlagsBotones(null);

            this.iniciaMetodosBotones(null);

            this.removeAll();

            return;

        }

        

        //=== PASO 1 Obtener la clase a partir del argumento psBotonesDefecto

        Class clase=null;

        DatosBH datosBH=null;

        Class []claseArg=new Class[1];

        String path="mapfre.com.c.GUI.";

        claseArg[0]=this.getClass();

        Method metodo=null;

        try

        {

            clase=Class.forName(path+this.getBotonesDefecto().trim());

            datosBH = (DatosBH) clase.newInstance();

        }

        catch(Exception e)

        {

            TBarraEstado.setMensajeError("No se ha encontrado la clase "+this.getBotonesDefecto());

            e.printStackTrace();

        }                                    

        

        //=== PASO 2 Ejecutar el método datosBH que inicializa los botones por defecto

        datosBH.datosBH(this);

        

        /*

        try //Obtencion del método datosBH()        

        {

            metodo= clase.getMethod("datosBH",claseArg);

        }

        catch (Exception e)

        {

            TBarraEstado.setMensajeError("Error en llamada a getMetodo: datosBH");

            e.printStackTrace();

        }

        

        Object[] arg={this}; //Ejecución del método datosBH()

        try

        {

            metodo.invoke(null,arg);

        }

        catch (Exception e)

        {

            TBarraEstado.setMensajeError("Error en llamada a metodo: datosBH");

            e.printStackTrace();

        }	*/       

        

        //Control de actualiza()

        if (this.numeroSet<7)

            this.numeroSet++;

        if (this.numeroSet==7 || (this.numeroSet==6 && this.getBotonesDefecto().equals("DatosBHVacia")))

            this.actualiza();

   }



   /**

    * Devuelve el nombre de la barra de herramientas de botones por defecto establecida en la propiedad <i>Botones por defecto</i>.

    * @return cadena con el nombre de la clase que contiene los botones por defecto introducido como propiedad por el usuario

    * @see setBotonesDefecto(java.lang.String)

    */

   public String getBotonesDefecto()

   {

        return this.botonesDefecto;

   }

   

   /**

    * Lee de la base de datos los mensajes emergentes y los asgina a cada boton

    */

    private void actualizaTooltips()

    {

        String sCodModulo="";

        String sCodTexto="";

        String sTextoTooltips="";

        StringTokenizer cadenas;

        for (int x=0;x<botones.numTools;x++)

        {

               cadenas=new StringTokenizer(botones.tooltips[x],",");

            sCodModulo=cadenas.nextToken();

            sCodTexto=cadenas.nextToken();            

            sTextoTooltips=Globales.leeCodigoTexto(sCodModulo,new Integer(sCodTexto).intValue());

            lblIcono[x].setToolTipText(sTextoTooltips);

        }        

    }

   

   /**Actualiza el borde el borde de un botón i-esimo a partir del estado "estado"*/

   private void actualizaPulsados(int i,int estado)

   {

      if (estado==NORMAL)

      {

        lblIcono[i].setBorder(bordeInicio);

      }

      else if (estado==LEVANTADO)

      {        

        lblIcono[i].setBorder(bordeNormal);     

      }

      else if (estado==HUNDIDO)

      {

        lblIcono[i].setBorder(bordePulsado);     

      }      

   }

   

   /**

    * Pulsa o libera botones segun los valores de la propiedad PulsadosBotones

    */

    private void actualizaPulsados()

    {

       if (botones.estadoPulsacion!=null)

       {

           for (int x=0;x<botones.estadoPulsacion.length;x++)

           {

               actualizaPulsados(x,botones.estadoPulsacion[x]);

           }

       }

   }



   /**

    * Crea label con las imagenes de los iconos y separadores de iconos si los hay

    */

   private void actualizaIconos()

   {

        int nNumSeparadores=0;

        int x, y, z; // variables de bucles

        mapfre.com.c.GUI.TSeparador sprSeparadorBarras = new mapfre.com.c.GUI.TSeparador();

        this.removeAll();

        

        int nNumLineas=botones.iconos.length;

        

        for (x=0;x<nNumLineas;x++) // cuento nº de separadores

        {

            if (botones.iconos[x].trim().equals("|") || botones.iconos[x].trim().equals(""))

            {

                nNumSeparadores++;

            }

        }

        botones.numIconos=nNumLineas-nNumSeparadores;

        lblIcono = new javax.swing.JLabel[botones.numIconos];

        // array de separadores: cada valor puede ser un blanco (separador vacio) o el simbolo | (separador vertical)

        sprIcono = new mapfre.com.c.GUI.TSeparador[nNumSeparadores];

        imgIcono = new javax.swing.ImageIcon[botones.numIconos];

        for (x=0, y=0, z=0;x<botones.numIconos;y++)

        {

            // y - indice de lineas

            // x - indice de iconos

            // z - indice de separadores

            if (botones.iconos[y].trim().equals("|") || botones.iconos[y].trim().equals(""))

            {

                sprIcono[z] = new mapfre.com.c.GUI.TSeparador();

                if (botones.iconos[y].trim().equals("|"))

                {

                    sprIcono[z].setTipoSeparador(TSeparador.VERTICAL);

                }

                else

                {

                    sprIcono[z].setTipoSeparador(TSeparador.VACIO);

                }

                sprIcono[z].setLayout(new FlowLayout(FlowLayout.CENTER,5,5));

                add(sprIcono[z]);

                z++;

            }

            else

            {

                imgIcono[x]     = Herramientas.getImagenIcono(botones.iconos[y]);

                lblIcono[x]     = new javax.swing.JLabel();

                htbCodigo.put(""+lblIcono[x].hashCode(),new Integer(x));

                lblIcono[x].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

                lblIcono[x].setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

                lblIcono[x].setAlignmentY(0.0F);

                lblIcono[x].setOpaque(false);          

                

                //removed 19032001

                lblIcono[x].setBorder(bordeInicio);           

                

                lblIcono[x].setIcon(imgIcono[x]); // Iconos en funcion del parametro

	            if (!java.beans.Beans.isDesignTime())

	            {

                        

                        lblIcono[x].addMouseListener(aSymMouse);

                }

                add(lblIcono[x]);        

                x++;

            }   

        }

    }

   

   /**

    * Controla las pulsaciones y los movimientos del ratón sobre 

    * los botones de la barra de herramientas.

    */

    class SymMouse extends java.awt.event.MouseAdapter

    {

        /**Invocado al liberar el botón del ratón sobre un botón de la barra*/

        public void mouseReleased(java.awt.event.MouseEvent event)

        {

            ejecutaMetodo(event);

        }

        /**Invocado al entrar el puntero del ratón en el botón*/

        public void mouseEntered(java.awt.event.MouseEvent event)

        {

              try

            {   

                javax.swing.JLabel label = (javax.swing.JLabel)event.getSource();

                Integer miEnt = (Integer) htbCodigo.get( ""+event.getComponent().hashCode());

                botonActual=miEnt.intValue();

                  if (lblIcono[botonActual].isEnabled()==false)

                    return;

                

                if (botonActual>botones.numPulsados)

                {

                    label.setBorder(bordeNormal);     

                }                   

                else if (new Boolean(botones.pulsados[botonActual]).booleanValue()==false)

                {

                    label.setBorder(bordeNormal);     

                }   

                else

                {

                    label.setBorder(bordePulsado);

                }            

                label.repaint();

            }

            catch(Exception e)

            {

                e.printStackTrace();

                TBarraEstado.setMensajeError("Estado de boton no definido. "+e);

            }

        }

        /**Invocado al salir el puntero del ratón del botón*/

        public void mouseExited(java.awt.event.MouseEvent event)

        {

            try

            {            

                

                javax.swing.JLabel label = (javax.swing.JLabel) (event.getSource());

                Integer miEnt = (Integer) htbCodigo.get( ""+event.getComponent().hashCode());

                                

                /*//new 19032001

                label.setBorder(bordeInicio); 

                actualizaPulsados();                

                

                botonActual=-1;    // raton no esta encima de ningun boton

                */

                //removed 19032001

                 if (botonActual>botones.numPulsados)

                {

                    label.setBorder(bordeNormal);     

                }  

                else if (new Boolean(botones.pulsados[miEnt.intValue()]).booleanValue()==false)

                {

                    label.setBorder(bordeInicio);     

                }

                else

                {

                    label.setBorder(bordePulsado);

                }

                label.repaint();

            }

            catch(Exception e)

            {

                e.printStackTrace();

                TBarraEstado.setMensajeError("Estado de boton no definido. "+e);

                

               // e.printStackTrace();

            }            

        }

        /**Invocado al presionar el ratón sobre el botón*/

        public void mousePressed(java.awt.event.MouseEvent event)

        {

            Integer miEnt = (Integer) htbCodigo.get( ""+event.getComponent().hashCode());

            botonPulsado=miEnt.intValue();

            if (lblIcono[botonPulsado].isEnabled()==false)

            {

                return;

            }

            JLabel object = (JLabel) event.getSource();

               

               //new 19032001

               //actualizaPulsados(botonPulsado,HUNDIDO);

               

               //removed 19032001

               object.setBorder(bordePulsado);     

               object.repaint();

        }

    }

    //{{DECLARE_CONTROLS

    //}}

    /**A partir del evento "event" que guarda la posición del ratón se

	* lanza el método asociado al botón de la barra de herramientas apuntado por el ratón*/

    private void ejecutaMetodo(java.awt.event.MouseEvent event)

    {

        Integer miEnt = (Integer) htbCodigo.get( ""+event.getComponent().hashCode());

        JLabel object = (JLabel) event.getSource();

        int indice=miEnt.intValue();        

     

        if (lblIcono[indice].isEnabled()==false)

           return;

        if (botonActual==botonPulsado) 

        {

            /*//new 19032001

            if (botonActual<botones.estadoPulsacion.length)

            {

                if (botones.estadoPulsacion[botonActual]==NORMAL)

                {

                    actualizaPulsados(botonActual,LEVANTADO);

                }                            

            }

            else

            {

                actualizaPulsados(botonActual,LEVANTADO);

            }

            */

            

            //removed 19032001

            object.setBorder(bordeNormal);

        }

        object.repaint();                

        

        if (botonActual==botonPulsado)

        {

            botonPulsado = -1;

            pulsaBoton(botonActual);

        }

    }

    /**Indice del botón actualmente señalado por el ratón*/

    private int iBotonActual;

    /**Recupera el índice del botón actualmente señalado por el ratón*/

    protected int getIndexBotonActual() {return iBotonActual;}

    /**Pulsa el botón de índice "indice"*/

    public void pulsaBoton(int indice)

    {

        iBotonActual = indice;

        // Ejecutar

        //if (botonActual==botonPulsado)

        //{ 

            //botonPulsado=-1;    // ningun boton pulsado

            // ejecuto accion del boton cuando el raton se encuentra encima

            // del boton donde se ha pulsado el raton

            

            Class clase=null; 

            Method metodo=null;

            Object result=null;

            Object objeto=null;

            

            if (indice>this.botones.numPropietarios)

                return;

            String propietario=botones.propietarios[indice];

            if (this.objetosPropietarios!=null && this.objetosPropietarios[indice]!=null)

            { // se ha seleccionado un objeto propietario para cada boton con el metodo setObjetosMetodos

                objeto=this.objetosPropietarios[indice];

                clase = objeto.getClass();

            }

            else if (propietario.equalsIgnoreCase(COMPONENTE_ACTIVO) || propietario.equalsIgnoreCase(TECLA))   

            { // objeto propietario sera el objeto activo 

               

               objeto=getPadre().getComponenteActual();                

               clase = objeto.getClass();

            }

            else if(propietario.equalsIgnoreCase(OBJETO))   

            { // propietario objeto padre unico elegido en la propiedad correspondiente por el usuario

                objeto=getObjetoPadre();

                clase = objeto.getClass();

            }

            else    // propietraio es una clase estatica

            {

                objeto=null;

                try

                {

                    clase=Class.forName(propietario);

                }

                catch(ClassNotFoundException e)

                {

                    TBarraEstado.setMensajeError("No se ha encontrado la clase "+botones.propietarios[indice]);

                }                                    

            }

            // Lanzar un evento de tecla

            if (propietario.equalsIgnoreCase(TECLA))

            {

                try

                {

                    Component componente=(Component)objeto;

                    Class claseEvento = Class.forName(CLASE_CONTROL_TECLAS);

                    Field campo=claseEvento.getDeclaredField(botones.metodos[indice]);

                    int tecla=campo.getInt(null);

                    int codigoTecla=mapfre.trn.ControlTeclas.getTecla(tecla);

                    int modificadorTecla=mapfre.trn.ControlTeclas.getModificador(tecla);

                    java.awt.event.KeyEvent eventoTecla = new java.awt.event.KeyEvent(componente,java.awt.event.KeyEvent.KEY_PRESSED,0,modificadorTecla,codigoTecla);

                    ControlTeclas.controlarTecla(tecla,(Component)objeto);

                    /*

                    try

                    {

                        ((mapfre.trn.TProcesarTeclas)objeto).procesarTecla(eventoTecla);

                    }

                    catch(Exception e)

                    {

                        //e.printStackTrace();

                        ControlTeclas.controlarTecla(tecla,objecto);

                    }*/

/*                    if (objeto instanceof TRadioButton)

                        ((TRadioButton)objeto).procesarTecla(eventoTecla);

                    else if (objeto instanceof TCheckBox)

                        ((TCheckBox)objeto).procesarTecla(eventoTecla);

                    else if (objeto instanceof TTabla)

                        ((TTabla)objeto).procesarTecla(eventoTecla);

                    else if (objeto instanceof TTextField)

                        ((TTextField)objeto).procesarTecla(eventoTecla);*/

                      

                }

                catch(Exception e)

                {

                    e.printStackTrace();

                    TBarraEstado.setMensajeError("Error en el evento de tecla nº "+(indice+1)+". "+e);

                }

                return;

            }

            //

            try

            {

                if(indice>botones.numMetodos)

                {

                   return;

                }

                metodo= clase.getMethod(botones.metodos[indice],null);

            }

            catch (Exception e)

            {

                TBarraEstado.setMensajeError("Error en llamada a getMetodo: "+botones.metodos[indice]);

            }

            try

            {

                result =  (Object) metodo.invoke(objeto, null);

            }

            catch (Exception e)

            {

                TBarraEstado.setMensajeError("Error en llamada a metodo: "+botones.metodos[indice]);

                e.printStackTrace();

            }            

        //}

    }    

    

    /**

     * Añade una barra de herramientas adicional a un vector que almacena todas las barras de la aplicacion

     * Necesario para refrescar los botones de cada barra activandolos o desactivandolos

     * @param pBarra Barra que se desea añadir

     */

/*    public static void addBarraHerramientas(mapfre.com.c.GUI.TBarraHerramientas pBarra)

    {

        barra.addElement(pBarra);

    }

    

    public static Vector getBarrasHerramientas()

    {

        return barra;

    }    

  */  

  

    public void refrescarBarra()

    {

        refrescarBarra(Globales.getComponenteActual());

    }

    /**

     * Desactiva o activa botones de la barra en funcion de la propiedad 

     * <a href="#setFlagsBotones(java.lang.String[])"<i>flagsBotones</i></a>

     * @param pComponente componente que invoca el metodo

     * @see #setFlagsBotones(java.lang.String[])

     */

    public void refrescarBarra(Object pRealComponente)

    {

        Object pComponente = null;

        if (this.propietarioFlags!=null)

        {

            pComponente=propietarioFlags;

        }

        else

        {

            pComponente = pRealComponente;

        }

         

        

        if (pComponente==null)

        {

            return;

        }



        for(int i=0;i<this.botones.numActivos;i++)

        {

            if (getActivacionBoton(i)==CONTROL_DEFECTO)

            {

                 Object[] o = ejecutaFlag(this.botones.flags[i],pComponente);

                //

                if (pComponente instanceof TTextField)

                {

                     if (!((TTextField)pComponente).isEnabled()&&this.getBotonesDefecto().equals("DatosBHGeneral")&& i==3 )

                     {

                        //Herramientas.println("Deshabilito el boton "+i+" del la barra "+this.getBotonesDefecto());

                        this.setActivoBoton(i, false);

                     }

                     else

                        this.setActivoBoton(i, ((Boolean)o[0]).booleanValue());                

                }

                else

                {

                  this.setActivoBoton(i, ((Boolean)o[0]).booleanValue());                                                 

                }

                //

                

                int estado = ((Integer)o[1]).intValue();

                if (estado!=NORMAL)

                    this.setPulsadoBoton(i,estado);                

                if (o[2]!=null)

                {

                    lblIcono[i].setIcon(Herramientas.getImagenIcono((String)o[2]));

                }

            }

        }

    }

 

    /**

     * Ejecuta el flag asociado sobre el objeto o. 

     * <p>El flag puede devoler una de las dos siguientes posibilidades:

     * <ul>

     * <li>Si devuelve un objeto de la clase Boolean se considera que el valor

     * devuelto es el estado de activación del botón. Es decir, un valor de

     * Boolean.TRUE indica que el botón está habilitado. Un valor de Boolean.FALSE

     * indica que está deshabilitado</li>

     *

     * <li>Si devuelve un objeto de la clase Object[] se considera que es un array

     * con las siguientes posiciones

     * <ol>

     *    <li>La primera posición es el estado de activación del botón. Es decir, un valor de

     *        Boolean.TRUE indica que el botón está habilitado. Un valor de Boolean.FALSE

     *        indica que está deshabilitado</li>

     *    <li>La segunda es el tipo de hundimiento del botón que puede ser NORMAL, LEVANTADO o HUNDIDO

     *    <li>La tercera es un String que representa el icono del botón. Si el valor

     *        es null se considera que el icono no varía. Se utiliza para los botones

     *        que pueden mostrar distintos iconos dependiendo del estado del componente

     *        actual.

     * </ol></li>

     * </ul>

     */

    private Object[] ejecutaFlag(String flag, Object o)

    {

        //boolean resul = false;

        Object[] resultado = new Object[] {Boolean.FALSE, new Integer(NORMAL),null};

        

        if (flag.equals(""))

        {

            resultado[0] = Boolean.TRUE;

        }

        else

        {

            try

            {

                Class clase   = o.getClass();

                Class params [] = {};

                Method metodo = clase.getMethod(flag,params);

                Object aux  = metodo.invoke(o,params);

                

                if (aux instanceof Boolean)

                {

                    resultado[0]=(Boolean)aux;

                }

                else if (aux instanceof Object[])

                {

                    resultado = (Object[])aux;

                }                                

            }

            catch (NoSuchMethodException nse) 

            {

                resultado[0]=Boolean.FALSE;

            }

            catch (Exception e)

            {

                resultado[0]=Boolean.FALSE;

                e.printStackTrace();

                TBarraEstado.setMensajeError(e.toString());

            }            

        }

        

        return resultado;

    }

    

    /**

    * Crea arrays del objeto botones uniendo botonesManual y botonesAutomatico

    */

    private void creaArraysBotones()

    {

        int x;

        int nNumDefecto;

        String []temp=null;

        

        // crea array de tooltips

        nNumDefecto=0;

        temp=botonesAutomatico.tooltips;

        if (temp!=null)

            nNumDefecto=temp.length;

        botones.numTools=nNumDefecto+botonesManual.numTools;            

        

        botones.tooltips=new String[botones.numTools];

        for (x=0;x<nNumDefecto;x++)

            botones.tooltips[x]=temp[x];

        for (x=0;x<botonesManual.numTools;x++)

            botones.tooltips[x+nNumDefecto]=botonesManual.tooltips[x];



        // crea array de estados de pulsacion

        nNumDefecto=0;

        temp=botonesAutomatico.pulsados;

        if (temp!=null)

            nNumDefecto=temp.length;

        botones.numPulsados=nNumDefecto+botonesManual.numPulsados;

        botones.pulsados=new String[botones.numPulsados];

        for (x=0;x<nNumDefecto;x++)

            botones.pulsados[x]=temp[x];

        for (x=0;x<botonesManual.numPulsados;x++)

            botones.pulsados[x+nNumDefecto]=botonesManual.pulsados[x];            



        // crea array de propietarios

        nNumDefecto=0;

        temp=botonesAutomatico.propietarios;

        if (temp!=null)

            nNumDefecto=temp.length;

        botones.numPropietarios=nNumDefecto+botonesManual.numPropietarios;

        botones.propietarios=new String[botones.numPropietarios];

        for (x=0;x<nNumDefecto;x++)

            botones.propietarios[x]=temp[x];

        for (x=0;x<botonesManual.numPropietarios;x++)

            botones.propietarios[x+nNumDefecto]=botonesManual.propietarios[x];



        // crea array de tipos

        nNumDefecto=0;

        temp=botonesAutomatico.flags;

        if (temp!=null)

            nNumDefecto=temp.length;

        botones.numActivos=nNumDefecto+botonesManual.numActivos;        

        botones.flags=new String[botones.numActivos];

        botones.activos=new boolean[botones.numActivos];        

        botones.activacion=new int[botones.numActivos];

        for (x=0;x<botones.numActivos;x++)

            botones.activacion[x]=CONTROL_DEFECTO;   

        

        for (x=0;x<nNumDefecto;x++)

            botones.flags[x]=temp[x];

        for (x=0;x<botonesManual.numActivos;x++)

            botones.flags[x+nNumDefecto]=botonesManual.flags[x]; 



        // crea array de metodos              

        nNumDefecto=0;

        temp=botonesAutomatico.metodos;

        if (temp!=null)

            nNumDefecto=temp.length;

        botones.numMetodos=nNumDefecto+botonesManual.numMetodos;

        botones.metodos=new String[botones.numMetodos];

        for (x=0;x<nNumDefecto;x++)

            botones.metodos[x]=temp[x];

        for (x=0;x<botonesManual.numMetodos;x++)

            botones.metodos[x+nNumDefecto]=botonesManual.metodos[x];



        // crea array de iconos

        nNumDefecto=0;

        temp=botonesAutomatico.iconos;

        if (temp!=null)

            nNumDefecto=temp.length;

        botones.numIconos=nNumDefecto+botonesManual.numIconos;

        botones.iconos=new String[botones.numIconos];       

        for (x=0;x<nNumDefecto;x++)

            botones.iconos[x]=temp[x];

        for (x=0;x<botonesManual.numIconos;x++)

            botones.iconos[x+nNumDefecto]=botonesManual.iconos[x];

    }

    

    /**

     * Metodo para invocar cuando se hayan realizado todos los set de las propiedades

     */

    private void actualiza()

    {

        creaArraysBotones();

        actualizaIconos();

        actualizaTooltips();

        actualizaPulsados();

    }



    /**

     * Recupera un vector con todas las barras de herramientas de un Container

     * 

     * @param Container: TFrame, TDialog o TPanel donde se quieren recuperar las barras de herramientas

     * @return vector con las barras de herramientas

     */    

    public static java.util.Vector getBarrasHerramientas(java.awt.Container contenedor)

    {

        java.util.Vector barras=new java.util.Vector();

        if (contenedor instanceof java.awt.Container)

            almacenaBarras(contenedor,barras);

        return barras;   

    }

    /**Ventana en donde está insertada la barra de herramientas*/

    TVentana ventanaActual = null;

    /**Recupera la ventana en donde está insertada la barra de herramientas*/

    private TVentana getPadre()

    {

        if (ventanaActual == null)

        {

            Component p = Globales.getPadre(this);

            if (p!=null)

            {

                ventanaActual = (TVentana) p;

            }            

        }

        return ventanaActual;

    }

    

    /**

	 * Recupera las labels usadas como botones de las barras de herramientas

	 */

    public JLabel[] getLabelsBotones()

    {

        return lblIcono;

    }

    

    /**

     * Busca las barras de herramientas de forma recursiva en todos los contenedores 

     * @param contenedor a partir del cual se empieza a buscar

     *        vector donde se almacenan las barras de herramientas halladas 

     */

    private static void almacenaBarras(java.awt.Container contenedor, java.util.Vector pBarras)        

    {

        Component[] componentes=contenedor.getComponents();

        if (componentes!=null)

        {       

            for (int i=0;i<contenedor.getComponentCount();i++)            

            {

                if (componentes[i] instanceof TBarraHerramientas)

                    pBarras.add(componentes[i]);

                if (componentes[i] instanceof java.awt.Container)

                        almacenaBarras((java.awt.Container)componentes[i],pBarras);

            }

        }

    }

}